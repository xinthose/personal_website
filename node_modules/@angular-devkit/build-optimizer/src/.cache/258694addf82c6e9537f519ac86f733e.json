{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/popup.component.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/popup.component.js","mtime":1516894113000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, NgZone, Renderer2, trigger, style, transition, animate } from '@angular/core';\nimport 'rxjs/add/observable/fromPromise';\nimport { Observable } from 'rxjs/Observable';\nimport { AlignService } from './services/align.service';\nimport { DOMService } from './services/dom.service';\nimport { PositionService } from './services/position.service';\nimport { ResizeService } from './services/resize.service';\nimport { ScrollableService } from './services/scrollable.service';\nimport { isDifferentOffset, isDocumentAvailable } from './util';\nvar DEFAULT_OFFSET = { left: -10000, top: 0 };\nvar ANIMATION_CONTAINER = 'k-animation-container';\nvar ANIMATION_CONTAINER_FIXED = 'k-animation-container-fixed';\n/**\n * Represents the Kendo UI Popup component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <button #anchor (click)=\"show=!show\">Toggle</button>\n *  <kendo-popup *ngIf=\"show\" [anchor]=\"anchor\">\n *      <strong>Popup content!</strong>\n *  </kendo-popup>\n * `\n * })\n * class AppComponent {\n *   public show: boolean = false;\n * }\n * ```\n */\nvar PopupComponent = /*@__PURE__*/ (function () {\n    function PopupComponent(container, _alignService, _domService, _cdr, _positionService, _resizeService, _scrollableService, _renderer, _zone) {\n        this.container = container;\n        this._alignService = _alignService;\n        this._domService = _domService;\n        this._cdr = _cdr;\n        this._positionService = _positionService;\n        this._resizeService = _resizeService;\n        this._scrollableService = _scrollableService;\n        this._renderer = _renderer;\n        this._zone = _zone;\n        /**\n         * Controls the Popup animation. By default, the opening and closing animations are enabled.\n         *\n         * For more information about how to enable and disable them,\n         * refer to the section on [Popup animations]({% slug overview_popup %}#toc-animations).\n         */\n        this.animate = true;\n        /**\n         * Specifies the anchor pivot point.\n         *\n         * For more information, refer to the section on\n         * [positioning]({% slug overview_popup %}#toc-position).\n         */\n        this.anchorAlign = { horizontal: 'left', vertical: 'bottom' };\n        /**\n         * Configures the collision behavior of the Popup.\n         *\n         * For more information, refer to the section on\n         * [viewport boundary detection]({% slug overview_popup %}#toc-viewport-boundary-detection).\n         */\n        this.collision = { horizontal: 'fit', vertical: 'flip' };\n        /**\n         * Specifies the pivot point of the Popup.\n         *\n         * For more information, refer to the section on\n         * [positioning]({% slug overview_popup %}#toc-position).\n         */\n        this.popupAlign = { horizontal: 'left', vertical: 'top' };\n        /**\n         * Controls whether the component should copy anchor styles.\n         */\n        this.copyAnchorStyles = false;\n        /**\n         * Specifies the position mode of the component. By default the Popup uses *fixed* mode.\n         * Set the option to `absolute` to use an *absolute* positioning.\n         *\n         * > Use the 'absolute' positioning if mobile browsers with zoom support is targeted.\n         *\n         * @example\n         * ```html\n         * <style>\n         *  .parent-content {\n         *     position: relative;\n         *     width: 200px;\n         *     height: 200px;\n         *     overflow: auto;\n         *     margin: 200px auto;\n         *     border: 1px solid red;\n         *  }\n         *  .content {\n         *     position: relative;\n         *     width: 100px;\n         *     height: 100px;\n         *     overflow: auto;\n         *     margin: 300px;\n         *     border: 1px solid blue;\n         *  }\n         *  .anchor {\n         *     position: absolute;\n         *     top: 200px;\n         *     left: 200px;\n         *  }\n         * </style>\n         * ```\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *   <div class=\"example-config\">\n         *      Position mode:\n         *      <label><input type=\"radio\" value=\"fixed\" [(ngModel)]=\"mode\" /> Fixed</label>\n         *      <label><input type=\"radio\" value=\"absolute\" [(ngModel)]=\"mode\" /> Absolute</label>\n         *   </div>\n         *   <div class=\"example-config\">\n         *       Append to\n         *       <label>\n         *           <input type=\"radio\" name=\"place\" [value]=\"1\" [(ngModel)]=\"checked\" />\n         *           Root component\n         *       </label>\n         *       <label>\n         *           <input type=\"radio\" name=\"place\" [value]=\"2\" [(ngModel)]=\"checked\" />\n         *           <span style=\"color: red\">Red Container</span>\n         *       </label>\n         *       <label>\n         *           <input type=\"radio\" name=\"place\" [value]=\"3\" [(ngModel)]=\"checked\" />\n         *           <span style=\"color: blue\">Blue Container</span>\n         *       </label>\n         *   </div>\n         *   <div class=\"example\">\n         *     <div class=\"parent-content\" [scrollLeft]=\"250\" [scrollTop]=\"230\">\n         *         <div class=\"content\" [scrollLeft]=\"170\" [scrollTop]=\"165\">\n         *           <button #anchor class=\"anchor\" (click)=\"show = !show\">Toggle</button>\n         *           <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 3\">\n         *             <ul>\n         *                 <li>Item1</li>\n         *                 <li>Item2</li>\n         *                 <li>Item3</li>\n         *             </ul>\n         *           </kendo-popup>\n         *           <span style=\"position: absolute; top: 400px; left: 400px\">Bottom/Right</span>\n         *         </div>\n         *         <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 2\">\n         *           <ul>\n         *               <li>Item1</li>\n         *               <li>Item2</li>\n         *               <li>Item3</li>\n         *           </ul>\n         *         </kendo-popup>\n         *         <span style=\"position: absolute; top: 600px; left: 600px\">Bottom/Right</span>\n         *     </div>\n         *     <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 1\">\n         *       <ul>\n         *           <li>Item1</li>\n         *           <li>Item2</li>\n         *           <li>Item3</li>\n         *       </ul>\n         *     </kendo-popup>\n         *   </div>\n         * `\n         * })\n         * class AppComponent {\n         *   public checked: number = 3;\n         *   public mode: string = 'absolute';\n         *   public show: boolean = true;\n         * }\n         * ```\n         */\n        this.positionMode = 'fixed';\n        /**\n         * Specifies the absolute position of the element. The Popup opens next to that point.\n         *\n         * The Popup pivot point is defined by the `popupAlign` configuration option.\n         * The boundary detection is applied by using the window viewport.\n         *\n         * For more information, refer to the section on\n         * [aligning to specific absolute points]({% slug overview_popup %}#toc-align-to-absolute-points).\n         */\n        this.offset = DEFAULT_OFFSET;\n        /**\n         * Fires when the anchor is scrolled outside the screen boundaries.\n         *\n         * For more information, refer to the section on\n         * [closing the Popup after leaving the viewport]({% slug overview_popup %}#toc-closing-after-leaving-the-viewport).\n         */\n        this.anchorViewportLeave = new EventEmitter();\n        /**\n         * Fires after the component is closed.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires after the component is opened and the opening animation ends.\n         */\n        this.open = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.direction = 'down';\n        this.resolvedPromise = Promise.resolve(null);\n        this._renderer.addClass(container.nativeElement, ANIMATION_CONTAINER);\n        this.updateFixedClass();\n    }\n    PopupComponent.prototype.ngOnInit = function () {\n        this.repositionCallback = this.reposition.bind(this);\n        this._resizeService.subscribe(this.repositionCallback);\n        this._scrollableService.forElement(this.anchor || this.container).subscribe(this.onScroll.bind(this));\n        this.currentOffset = DEFAULT_OFFSET;\n        this.setZIndex();\n        this.copyFontStyles();\n        this.updateFixedClass();\n    };\n    PopupComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.copyAnchorStyles) {\n            this.copyFontStyles();\n        }\n        if (changes.positionMode) {\n            this.updateFixedClass();\n        }\n    };\n    PopupComponent.prototype.ngAfterViewInit = function () {\n        // positions the popup before the initial animation starts.\n        this.reposition();\n    };\n    PopupComponent.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            // workarounds https://github.com/angular/angular/issues/19094\n            // uses promise because it is executed synchronously after the content is updated\n            // does not use onStable in case the current zone is not the angular one.\n            if (_this.repositionSubscription) {\n                _this.repositionSubscription.unsubscribe();\n            }\n            _this.repositionSubscription = Observable.fromPromise(_this.resolvedPromise)\n                .subscribe(_this.repositionCallback);\n        });\n    };\n    PopupComponent.prototype.ngOnDestroy = function () {\n        this.anchorViewportLeave.complete();\n        this.close.emit();\n        this.close.complete();\n        this._resizeService.unsubscribe();\n        this._scrollableService.unsubscribe();\n        if (this.repositionSubscription) {\n            this.repositionSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    PopupComponent.prototype.triggerOpen = function (_event) {\n        this._renderer.addClass(this.container.nativeElement, 'k-animation-container-shown');\n        this.open.emit();\n        this.open.complete();\n    };\n    Object.defineProperty(PopupComponent.prototype, \"currentOffset\", {\n        get: function () {\n            return this._currentOffset;\n        },\n        set: function (offset) {\n            if (!this._currentOffset || isDifferentOffset(this._currentOffset, offset)) {\n                this.setContainerStyle('left', offset.left + \"px\");\n                this.setContainerStyle('top', offset.top + \"px\");\n                this._currentOffset = offset;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PopupComponent.prototype.setZIndex = function () {\n        if (this.anchor) {\n            this.setContainerStyle('z-index', String(this._domService.zIndex(this.anchor, this.container)));\n        }\n    };\n    PopupComponent.prototype.reposition = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var _a = this.position(), flipped = _a.flipped, offset = _a.offset;\n        var newDirection = this.getDirection(flipped);\n        this.currentOffset = offset;\n        if (this.direction !== newDirection) {\n            this.direction = newDirection;\n            this._cdr.detectChanges();\n        }\n    };\n    PopupComponent.prototype.position = function () {\n        var alignedOffset = this._alignService.alignElement({\n            anchor: this.anchor,\n            anchorAlign: this.anchorAlign,\n            element: this.container,\n            elementAlign: this.popupAlign,\n            offset: this.offset,\n            positionMode: this.positionMode\n        });\n        return this._positionService.positionElement({\n            anchor: this.anchor,\n            anchorAlign: this.anchorAlign,\n            collisions: this.collision,\n            currentLocation: alignedOffset,\n            element: this.container,\n            elementAlign: this.popupAlign,\n            positionMode: this.positionMode\n        });\n    };\n    PopupComponent.prototype.getDirection = function (flipped) {\n        return this.animate ? (flipped ? 'up' : 'down') : 'none';\n    };\n    PopupComponent.prototype.onScroll = function (isInViewPort) {\n        var _this = this;\n        var hasObservers = this.anchorViewportLeave.observers.length;\n        if (isInViewPort || !hasObservers) {\n            this.reposition();\n        }\n        else if (hasObservers) {\n            this._zone.run(function () {\n                _this.anchorViewportLeave.emit();\n            });\n        }\n    };\n    PopupComponent.prototype.copyFontStyles = function () {\n        var _this = this;\n        if (!this.anchor || !this.copyAnchorStyles) {\n            return;\n        }\n        this._domService.getFontStyles(this.anchor)\n            .forEach(function (s) { return _this.setContainerStyle(s.key, s.value); });\n    };\n    PopupComponent.prototype.updateFixedClass = function () {\n        var action = this.positionMode === 'fixed' ? 'addClass' : 'removeClass';\n        this._renderer[action](this.container.nativeElement, ANIMATION_CONTAINER_FIXED);\n    };\n    PopupComponent.prototype.setContainerStyle = function (name, value) {\n        this._renderer.setStyle(this.container.nativeElement, name, value);\n    };\n    return PopupComponent;\n}());\nexport { PopupComponent };\n",null]}