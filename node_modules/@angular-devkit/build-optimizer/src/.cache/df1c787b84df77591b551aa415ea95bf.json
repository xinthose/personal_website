{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/focusable/focusable.directive.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/focusable/focusable.directive.js","mtime":1516893312000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, Input, HostBinding, ElementRef } from '@angular/core';\nimport { FocusService } from './focus.service';\nimport { isDocumentAvailable } from './../util';\n/**\n * @hidden\n */\nvar FocusableDirective = /*@__PURE__*/ (function () {\n    function FocusableDirective(focusService, elementRef) {\n        this.focusService = focusService;\n        this.element = elementRef.nativeElement;\n        this.subscribeEvents();\n    }\n    Object.defineProperty(FocusableDirective.prototype, \"focusedClassName\", {\n        get: function () {\n            return this.focusService.isFocused(this.index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.ngOnDestroy = function () {\n        this.unsubscribeEvents();\n    };\n    FocusableDirective.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.focusSubscription = this.focusService.onFocus.subscribe(function (index) {\n            if (_this.index === index) {\n                _this.element.focus();\n            }\n        });\n    };\n    FocusableDirective.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        if (this.focusSubscription) {\n            this.focusSubscription.unsubscribe();\n        }\n    };\n    return FocusableDirective;\n}());\nexport { FocusableDirective };\n",null]}