{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/services/position.service.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/services/position.service.js","mtime":1516894113000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { DOMService } from './dom.service';\nimport { eitherRect, replaceOffset } from '../util';\n/**\n * @hidden\n */\nvar PositionService = /*@__PURE__*/ (function () {\n    function PositionService(_dom) {\n        this._dom = _dom;\n    }\n    PositionService.prototype.positionElement = function (settings) {\n        var anchor = settings.anchor, currentLocation = settings.currentLocation, positionMode = settings.positionMode, element = settings.element, anchorAlign = settings.anchorAlign, elementAlign = settings.elementAlign, collisions = settings.collisions;\n        var dom = this._dom;\n        var viewPort = settings.viewPort || dom.stackingElementViewPort(element) || dom.windowViewPort(element);\n        var anchorRect = eitherRect(dom.offset(anchor), currentLocation);\n        var initialElementRect = replaceOffset(dom.staticOffset(element), currentLocation);\n        var elementRect = this.elementRect(element, initialElementRect, positionMode);\n        var result = dom.restrictToView({\n            anchorAlign: anchorAlign,\n            anchorRect: anchorRect,\n            collisions: collisions,\n            elementAlign: elementAlign,\n            elementRect: elementRect,\n            viewPort: viewPort\n        });\n        return {\n            flipped: result.flipped,\n            offset: dom.addOffset(initialElementRect, result.offset)\n        };\n    };\n    PositionService.prototype.elementRect = function (element, rect, mode) {\n        if (mode === 'fixed') {\n            return rect;\n        }\n        return this._dom.removeScroll(rect, this._dom.scrollPosition(element));\n    };\n    return PositionService;\n}());\nexport { PositionService };\n",null]}