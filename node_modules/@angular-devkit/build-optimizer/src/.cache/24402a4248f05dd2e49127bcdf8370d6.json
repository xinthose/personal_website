{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/dropdownbutton/dropdownbutton.component.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/dropdownbutton/dropdownbutton.component.js","mtime":1516893312000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/* tslint:disable:no-access-missing-member */\nimport { Component, ContentChild, ViewChild, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Optional, Inject, NgZone } from '@angular/core';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { ButtonItemTemplateDirective } from '../listbutton/button-item-template.directive';\nimport { isDocumentAvailable, isPresent, guid, tick } from '../util';\nimport { ListButton } from '../listbutton/list-button';\nimport { FocusService } from '../focusable/focus.service';\nimport { NavigationService } from '../navigation/navigation.service';\nimport { NAVIGATION_CONFIG } from '../navigation/navigation-config';\nimport { PreventableEvent } from '../preventable-event';\nvar NAVIGATION_SETTINGS = {\n    useLeftRightArrows: true\n};\nvar NAVIGATION_SETTINGS_PROVIDER = {\n    provide: NAVIGATION_CONFIG,\n    useValue: NAVIGATION_SETTINGS\n};\n/**\n * Represents the Kendo UI DropDownButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownbutton [data]=\"data\">\n *    User Settings\n *  </kendo-dropdownbutton>\n * `\n * })\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'My Profile'\n *   }, {\n *       text: 'Friend Requests'\n *   }, {\n *       text: 'Account Settings'\n *   }, {\n *       text: 'Support'\n *   }, {\n *       text: 'Log Out'\n *   }];\n * }\n * ```\n */\nvar DropDownButtonComponent = (function (_super) {\n    tslib_1.__extends(DropDownButtonComponent, _super);\n    function DropDownButtonComponent(focusService, navigationService, wrapperRef, zone, popupService, rtl) {\n        var _this = _super.call(this, focusService, navigationService, wrapperRef, zone) || this;\n        _this.popupService = popupService;\n        /**\n         * Defines the name of an existing icon in a Kendo UI theme.\n         */\n        _this.icon = '';\n        /**\n         * Defines the list of CSS classes which are used for styling the Button with custom icons.\n         */\n        _this.iconClass = '';\n        /**\n         * Defines a URL for styling the button with a custom image.\n         */\n        _this.imageUrl = '';\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        _this.tabIndex = 0;\n        /**\n         * Fires each time the user clicks on a drop-down list item. The event data contains the data item bound to the clicked list item.\n         */\n        _this.itemClick = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         */\n        _this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         */\n        _this.close = new EventEmitter();\n        /**\n         * Fires each time the DropDownButton gets focused.\n         */\n        _this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the DropDownButton gets blurred.\n         */\n        _this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        _this.listId = guid();\n        _this.direction = rtl ? 'rtl' : 'ltr';\n        _this._itemClick = _this.itemClick;\n        _this._blur = _this.onBlur;\n        return _this;\n    }\n    Object.defineProperty(DropDownButtonComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the DropDownButton.\n         *\n         * The available options are:\n         * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * Sets the disabled state of the DropDownButton.\n         */\n        set: function (value) {\n            if (value && this.openState) {\n                this.openState = false;\n            }\n            this._disabled = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        /**\n         * Sets or gets the data of the DropDownButton.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this._data = data || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"openState\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._open;\n        },\n        /**\n         * @hidden\n         */\n        set: function (open) {\n            if (this.disabled) {\n                return;\n            }\n            var eventArgs = new PreventableEvent();\n            if (open) {\n                this.open.emit(eventArgs);\n            }\n            else {\n                this.close.emit(eventArgs);\n            }\n            if (eventArgs.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(open);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"componentTabIndex\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled ? (-1) : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"focused\", {\n        get: function () {\n            return this._isFocused && !this._disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"active\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.keydown = function (event) {\n        this.keyDownHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.keypress = function (event) {\n        this.keyPressHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.keyup = function (event) {\n        this.keyUpHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.mousedown = function (event) {\n        if (this._disabled) {\n            event.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.openPopup = function () {\n        this.togglePopupVisibility();\n    };\n    Object.defineProperty(DropDownButtonComponent.prototype, \"anchorAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: 'left', vertical: 'bottom' };\n            if (this.direction === 'rtl') {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"popupAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: 'left', vertical: 'top' };\n            if (this.direction === 'rtl') {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the DropDownButton component.\n     */\n    DropDownButtonComponent.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    /**\n     * Blurs the DropDownButton component.\n     */\n    DropDownButtonComponent.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.blur();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    DropDownButtonComponent.prototype.toggle = function (open) {\n        var _this = this;\n        if (this.disabled) {\n            return;\n        }\n        tick(function () { return (_this._toggle((open === undefined) ? !_this._open : open)); });\n    };\n    Object.defineProperty(DropDownButtonComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.openState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.handleFocus = function () {\n        if (!this._disabled && !this._isFocused) {\n            this._isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.wrapperContains = function (element) {\n        return this.wrapper === element\n            || this.wrapper.contains(element)\n            || (this.popupRef && this.popupRef.popupElement.contains(element));\n    };\n    DropDownButtonComponent.prototype.subscribeNavigationEvents = function () {\n        this.navigationSubscription = this.navigationService.navigate\n            .subscribe(this.onArrowKeyNavigate.bind(this));\n        this.enterPressSubscription = this.navigationService.enterpress.subscribe(this.onNavigationEnterPress.bind(this));\n        this.enterUpSubscription = this.navigationService.enterup.subscribe(this.onNavigationEnterUp.bind(this));\n        this.openSubscription = this.navigationService.open.subscribe(this.onNavigationOpen.bind(this));\n        this.closeSubscription = this.navigationService.close\n            .merge(this.navigationService.esc)\n            .subscribe(this.onNavigationClose.bind(this));\n    };\n    DropDownButtonComponent.prototype.onNavigationEnterPress = function () {\n        if (!this._disabled && !this.openState) {\n            this._active = true;\n        }\n    };\n    DropDownButtonComponent.prototype.onNavigationEnterUp = function () {\n        if (!this._disabled && !this.openState) {\n            this._active = false;\n        }\n        if (this.openState) {\n            var focused = this.focusService.focused;\n            if (isPresent(focused) && focused !== -1) {\n                this.emitItemClickHandler(focused);\n            }\n        }\n        this.togglePopupVisibility();\n        if (!this.openState && isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    DropDownButtonComponent.prototype.onNavigationOpen = function () {\n        if (!this._disabled && !this.openState) {\n            this.togglePopupVisibility();\n        }\n    };\n    DropDownButtonComponent.prototype.onNavigationClose = function () {\n        if (this.openState) {\n            this.togglePopupVisibility();\n            if (isDocumentAvailable()) {\n                this.button.nativeElement.focus();\n            }\n        }\n    };\n    DropDownButtonComponent.prototype.onArrowKeyNavigate = function (index) {\n        this.focusService.focus(index);\n    };\n    DropDownButtonComponent.prototype._toggle = function (open) {\n        var _this = this;\n        if (this._open === open) {\n            return;\n        }\n        this._open = open;\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n        if (this._open) {\n            this.popupRef = this.popupService.open({\n                anchor: this.button,\n                anchorAlign: this.anchorAlign,\n                animate: this.popupSettings.animate,\n                content: this.popupTemplate,\n                popupAlign: this.popupAlign,\n                popupClass: this.popupClasses\n            });\n            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.openState = false; });\n            this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));\n        }\n    };\n    return DropDownButtonComponent;\n}(ListButton));\nexport { DropDownButtonComponent };\n",null]}