{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-popup-common/dist/es/restrict-to-view.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-popup-common/dist/es/restrict-to-view.js","mtime":1508491151000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import alignPoint from './align-point';\nimport collision from './collision';\n\nvar fit = function(position, size, viewPortSize) {\n    var output = 0;\n\n    if (position + size > viewPortSize) {\n        output = viewPortSize - (position + size);\n    }\n\n    if (position < 0) {\n        output = -position;\n    }\n\n    return output;\n};\n\nvar flip = function(ref) {\n    var offset = ref.offset;\n    var size = ref.size;\n    var anchorSize = ref.anchorSize;\n    var viewPortSize = ref.viewPortSize;\n    var anchorAlignPoint = ref.anchorAlignPoint;\n    var elementAlignPoint = ref.elementAlignPoint;\n\n    var output = 0;\n\n    var isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n    var isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n\n    if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered && offset > -1) {\n        if (offset + size > viewPortSize) {\n            output += -(anchorSize + size);\n        }\n\n        if (offset + output < 0) {\n            output += anchorSize + size;\n        }\n    }\n    return output;\n};\n\nvar restrictToView = function (options) {\n    var anchorRect = options.anchorRect;\n    var anchorAlign = options.anchorAlign;\n    var elementRect = options.elementRect;\n    var elementAlign = options.elementAlign;\n    var collisions = options.collisions;\n    var viewPort = options.viewPort;\n    var elementTop = elementRect.top;\n    var elementLeft = elementRect.left;\n    var elementHeight = elementRect.height;\n    var elementWidth = elementRect.width;\n    var viewPortHeight = viewPort.height;\n    var viewPortWidth = viewPort.width;\n\n    var left = 0;\n    var top = 0;\n\n    var isHorizontalFlip = collisions.horizontal === collision.flip;\n    var isVerticalFlip = collisions.vertical === collision.flip;\n\n    if (collisions.vertical === collision.fit) {\n        top += fit(elementTop, elementHeight, viewPortHeight);\n    }\n\n    if (collisions.horizontal === collision.fit) {\n        left += fit(elementLeft, elementWidth, viewPortWidth);\n    }\n\n    if (isVerticalFlip) {\n        top += flip({\n            offset: elementTop,\n            size: elementHeight,\n            anchorSize: anchorRect.height,\n            viewPortSize: viewPortHeight,\n            anchorAlignPoint: anchorAlign.vertical,\n            elementAlignPoint: elementAlign.vertical\n        });\n    }\n\n    if (isHorizontalFlip) {\n        left += flip({\n            offset: elementLeft,\n            size: elementWidth,\n            anchorSize: anchorRect.width,\n            viewPortSize: viewPortWidth,\n            anchorAlignPoint: anchorAlign.horizontal,\n            elementAlignPoint: elementAlign.horizontal\n        });\n    }\n\n    return {\n        flipped: (isHorizontalFlip && left !== 0) || (isVerticalFlip && top !== 0),\n        offset: {\n            left: left,\n            top: top\n        }\n    };\n};\n\nexport default restrictToView;\n\n//# sourceMappingURL=restrict-to-view.js.map\n",null]}