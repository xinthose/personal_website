{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/buttongroup/buttongroup.component.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/buttongroup/buttongroup.component.js","mtime":1516893312000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ButtonDirective } from '../button/button.directive';\nimport { Component, Input, ContentChildren, HostBinding, HostListener, isDevMode, Optional, Inject } from '@angular/core';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { KendoButtonService } from '../button/button.service';\nimport { isPresent } from '../util';\nimport { Keys } from '../navigation/keys';\n/**\n * @hidden\n */\nvar ariaChecked = 'aria-checked';\n/**\n * @hidden\n */\nvar role = 'role';\n/**\n * @hidden\n */\nvar tabindex = 'tabindex';\n/**\n * Represents the Kendo UI ButtonGroup component for Angular.\n */\nvar ButtonGroupComponent = /*@__PURE__*/ (function () {\n    function ButtonGroupComponent(service, rtl) {\n        this.service = service;\n        /**\n         * By default, the selection mode of the ButtonGroup is set to `multiple`.\n         */\n        this.selection = 'multiple';\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         * The available values are:\n         * * `bare`\n         * * `flat`\n         * * `outline`\n         *\n         * The `look` property of the ButtonGroup takes precedence over the `look` property\n         * of the individual buttons that are part of the group.\n         */\n        this.look = 'default';\n        this.direction = rtl ? 'rtl' : 'ltr';\n    }\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"stretchedClass\", {\n        get: function () {\n            return !!this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isBare\", {\n        get: function () {\n            return this.look === 'bare';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isFlat\", {\n        get: function () {\n            return this.look === 'flat';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isOutline\", {\n        get: function () {\n            return this.look === 'outline';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"getRole\", {\n        get: function () {\n            return this.isSelectionSingle() ? 'radiogroup' : 'group';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperWidth\", {\n        get: function () {\n            return this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ButtonGroupComponent.prototype.keydown = function (event) {\n        if (this.isSelectionSingle()) {\n            var selectedIndex_1 = this.buttons.toArray().findIndex(function (current) { return current.selected; });\n            var firstIndex = 0;\n            var lastIndex = this.buttons.length - 1;\n            if (selectedIndex_1 !== undefined) {\n                if (event.keyCode === Keys.right && selectedIndex_1 < lastIndex) {\n                    this.deactivate(this.buttons.filter(function (current) { return current.selected; }));\n                    this.activate(this.buttons.filter(function (_current, index) {\n                        return index === selectedIndex_1 + 1;\n                    }));\n                }\n                if (event.keyCode === Keys.left && selectedIndex_1 > firstIndex) {\n                    this.deactivate(this.buttons.filter(function (current) { return current.selected; }));\n                    this.activate(this.buttons.filter(function (_current, index) {\n                        return index === selectedIndex_1 - 1;\n                    }));\n                }\n            }\n        }\n    };\n    ButtonGroupComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this.service.buttonClicked$.subscribe(function (button) {\n            if (_this.isSelectionSingle()) {\n                _this.deactivate(_this.buttons.filter(function (current) { return current !== button; }));\n                button.setSelected(true);\n            }\n            else {\n                button.setSelected(!button.selected);\n            }\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, button.tabIndex.toString());\n        });\n    };\n    ButtonGroupComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        var isRadioGroup = this.isSelectionSingle();\n        var buttonsRole = isRadioGroup ? 'radio' : 'checkbox';\n        var anyChecked = false;\n        this.buttons.forEach(function (button) {\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(role, buttonsRole);\n            if (isPresent(_this.disabled)) {\n                button.disabled = _this.disabled;\n            }\n            if (_this.look !== 'default') {\n                button.look = _this.look;\n            }\n            if (!isRadioGroup || button.selected) {\n                button.setAttribute(tabindex, button.tabIndex.toString());\n            }\n            else if (isRadioGroup && !button.selected) {\n                button.setAttribute(tabindex, \"-1\");\n            }\n            anyChecked = anyChecked || button.selected;\n        });\n        if (isRadioGroup && !anyChecked) {\n            this.buttons.first.setAttribute(tabindex, this.buttons.first.tabIndex.toString());\n            this.buttons.last.setAttribute(tabindex, this.buttons.last.tabIndex.toString());\n        }\n    };\n    ButtonGroupComponent.prototype.ngAfterViewChecked = function () {\n        if (this.buttons.length) {\n            this.buttons.first.renderer.addClass(this.buttons.first.element, 'k-group-start');\n            this.buttons.last.renderer.addClass(this.buttons.last.element, 'k-group-end');\n        }\n    };\n    ButtonGroupComponent.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    ButtonGroupComponent.prototype.ngAfterContentChecked = function () {\n        this.verifySettings();\n    };\n    ButtonGroupComponent.prototype.deactivate = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setSelected(false);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"-1\");\n        });\n    };\n    ButtonGroupComponent.prototype.activate = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setSelected(true);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"0\");\n            button.focus();\n        });\n    };\n    ButtonGroupComponent.prototype.verifySettings = function () {\n        if (isDevMode()) {\n            if (this.isSelectionSingle() && this.buttons.filter(function (button) { return button.selected; }).length > 1) {\n                throw new Error('Having multiple selected buttons with single selection mode is not supported');\n            }\n        }\n    };\n    ButtonGroupComponent.prototype.isSelectionSingle = function () {\n        return this.selection === 'single';\n    };\n    return ButtonGroupComponent;\n}());\nexport { ButtonGroupComponent };\n",null]}