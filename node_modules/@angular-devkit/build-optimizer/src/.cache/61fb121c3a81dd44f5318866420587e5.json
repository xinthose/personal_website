{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/services/dom.service.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/services/dom.service.js","mtime":1516894113000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { align, applyLocationOffset, boundingOffset, getWindowViewPort, isBodyOffset, offset, positionWithScroll, restrictToView, addScroll, removeScroll, scrollPosition, siblingContainer } from '@progress/kendo-popup-common';\nimport { isDocumentAvailable, isWindowAvailable, HAS_RELATIVE_STACKING_CONTEXT, scrollableParents, zIndex } from '../util';\nvar STYLES = [\n    'font-size',\n    'font-family',\n    'font-stretch',\n    'font-style',\n    'font-weight',\n    'line-height'\n];\n/**\n * @hidden\n */\nvar DOMService = /*@__PURE__*/ (function () {\n    function DOMService() {\n    }\n    DOMService.prototype.addOffset = function (current, addition) {\n        return {\n            left: current.left + addition.left,\n            top: current.top + addition.top\n        };\n    };\n    DOMService.prototype.align = function (settings) {\n        return align(settings);\n    };\n    DOMService.prototype.boundingOffset = function (el) {\n        return boundingOffset(this.nativeElement(el));\n    };\n    DOMService.prototype.getFontStyles = function (el) {\n        var window = this.getWindow();\n        if (!window || !el) {\n            return [];\n        }\n        var computedStyles = window.getComputedStyle(this.nativeElement(el));\n        return STYLES.map(function (font) { return ({ key: font, value: computedStyles[font] }); });\n    };\n    DOMService.prototype.getWindow = function () {\n        return isWindowAvailable() ? window : null;\n    };\n    DOMService.prototype.isBodyOffset = function (el) {\n        return isBodyOffset(this.nativeElement(el));\n    };\n    DOMService.prototype.hasOffsetParent = function (el) {\n        if (!el) {\n            return false;\n        }\n        return !!this.nativeElement(el).offsetParent;\n    };\n    DOMService.prototype.offset = function (el) {\n        if (!el) {\n            return null;\n        }\n        return offset(this.nativeElement(el));\n    };\n    DOMService.prototype.staticOffset = function (el) {\n        if (!el) {\n            return null;\n        }\n        var element = this.nativeElement(el);\n        var _a = element.style, left = _a.left, top = _a.top;\n        element.style.left = '0px';\n        element.style.top = '0px';\n        var currentOffset = offset(element);\n        element.style.left = left;\n        element.style.top = top;\n        return currentOffset;\n    };\n    DOMService.prototype.nativeElement = function (el) {\n        if (!el) {\n            return null;\n        }\n        return el.nativeElement || el;\n    };\n    DOMService.prototype.position = function (element, popup) {\n        if (!element || !popup) {\n            return null;\n        }\n        var nativeEl = this.nativeElement(element);\n        var parentSibling = siblingContainer(nativeEl, this.nativeElement(popup));\n        return positionWithScroll(nativeEl, parentSibling);\n    };\n    DOMService.prototype.relativeOffset = function (el, currentLocation) {\n        return applyLocationOffset(this.offset(el), currentLocation, this.isBodyOffset(el));\n    };\n    DOMService.prototype.addScroll = function (rect, scroll) {\n        return addScroll(rect, scroll);\n    };\n    DOMService.prototype.removeScroll = function (rect, scroll) {\n        return removeScroll(rect, scroll);\n    };\n    DOMService.prototype.restrictToView = function (settings) {\n        return restrictToView(settings);\n    };\n    DOMService.prototype.scrollPosition = function (el) {\n        return scrollPosition(this.nativeElement(el));\n    };\n    DOMService.prototype.scrollableParents = function (el) {\n        return scrollableParents(this.nativeElement(el));\n    };\n    DOMService.prototype.stackingElementOffset = function (el) {\n        var relativeContextElement = this.getRelativeContextElement(el);\n        if (!relativeContextElement) {\n            return null;\n        }\n        return offset(relativeContextElement);\n    };\n    DOMService.prototype.stackingElementScroll = function (el) {\n        var relativeContextElement = this.getRelativeContextElement(el);\n        if (!relativeContextElement) {\n            return { x: 0, y: 0 };\n        }\n        return {\n            x: relativeContextElement.scrollLeft,\n            y: relativeContextElement.scrollTop\n        };\n    };\n    DOMService.prototype.stackingElementViewPort = function (el) {\n        var relativeContextElement = this.getRelativeContextElement(el);\n        if (!relativeContextElement) {\n            return null;\n        }\n        return {\n            height: relativeContextElement.scrollHeight,\n            width: relativeContextElement.scrollWidth\n        };\n    };\n    DOMService.prototype.getRelativeContextElement = function (el) {\n        if (!el || !HAS_RELATIVE_STACKING_CONTEXT) {\n            return null;\n        }\n        var parent = this.nativeElement(el).parentElement;\n        while (parent) {\n            if (window.getComputedStyle(parent).transform !== 'none') {\n                return parent;\n            }\n            parent = parent.parentElement;\n        }\n        return null;\n    };\n    DOMService.prototype.useRelativePosition = function (el) {\n        return !!this.getRelativeContextElement(el);\n    };\n    DOMService.prototype.windowViewPort = function (el) {\n        return getWindowViewPort(this.nativeElement(el));\n    };\n    DOMService.prototype.zIndex = function (anchor, container) {\n        return zIndex(this.nativeElement(anchor), this.nativeElement(container));\n    };\n    DOMService.prototype.zoomLevel = function () {\n        if (!isDocumentAvailable() || !isWindowAvailable()) {\n            return 1;\n        }\n        return parseFloat((document.documentElement.clientWidth / window.innerWidth).toFixed(2));\n    };\n    DOMService.prototype.isZoomed = function () {\n        return this.zoomLevel() > 1;\n    };\n    return DOMService;\n}());\nexport { DOMService };\n",null]}