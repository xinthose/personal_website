{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/splitbutton/splitbutton.component.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/splitbutton/splitbutton.component.js","mtime":1516893312000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/* tslint:disable:no-access-missing-member */\nimport { Component, ElementRef, Input, Output, HostBinding, HostListener, Inject, Optional, EventEmitter, ContentChild, ViewChild, NgZone } from '@angular/core';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { ListButton } from './../listbutton/list-button';\nimport { ButtonItemTemplateDirective } from './../listbutton/button-item-template.directive';\nimport { FocusService } from './../focusable/focus.service';\nimport { NavigationService } from './../navigation/navigation.service';\nimport { NAVIGATION_CONFIG } from './../navigation/navigation-config';\nimport { isPresent, isDocumentAvailable, guid, tick } from './../util';\nimport { PreventableEvent } from '../preventable-event';\nvar NAVIGATION_SETTINGS = {\n    useLeftRightArrows: true\n};\nvar NAVIGATION_SETTINGS_PROVIDER = {\n    provide: NAVIGATION_CONFIG,\n    useValue: NAVIGATION_SETTINGS\n};\n/**\n * Represents the Kendo UI SplitButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-splitbutton [data]=\"data\" [icon]=\"'paste'\"\n *      (itemClick)=\"onSplitButtonItemClick($event)\"\n *      (buttonClick)=\"onSplitButtonClick()\">Paste</kendo-splitbutton>\n * `\n * })\n *\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'Keep Text Only',\n *       icon: 'paste-plain-text',\n *       click: () => { console.log('Keep Text Only click handler'); }\n *   }, {\n *       text: 'Paste as HTML',\n *       icon: 'paste-as-html'\n *   }, {\n *       text: 'Paste Markdown',\n *       icon: 'paste-markdown'\n *   }, {\n *       text: 'Set Default Paste'\n *   }];\n *\n *   public onSplitButtonClick(dataItem: any): void {\n *       console.log('Paste');\n *   }\n *\n *   public onSplitButtonItemClick(dataItem: any): void {\n *       if (dataItem) {\n *           console.log(dataItem.text);\n *       }\n *   }\n * }\n * ```\n */\nvar SplitButtonComponent = (function (_super) {\n    tslib_1.__extends(SplitButtonComponent, _super);\n    function SplitButtonComponent(focusService, navigationService, wrapperRef, zone, popupService, rtl) {\n        var _this = _super.call(this, focusService, navigationService, wrapperRef, zone) || this;\n        _this.popupService = popupService;\n        /**\n         * Sets the text of the SplitButton.\n         */\n        _this.text = '';\n        /**\n         * Defines an icon to be rendered next to the button text.\n         */\n        _this.icon = '';\n        /**\n         * Defines an icon with a custom CSS class to be rendered next to the button text.\n         */\n        _this.iconClass = '';\n        /**\n         * Defines the location of an image to be displayed next to the button text.\n         */\n        _this.imageUrl = '';\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        _this.tabIndex = 0;\n        /**\n         * Fires each time the user clicks the main button.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-splitbutton (buttonClick)=\"onSplitButtonClick()\" [data]=\"data\">\n         *            Reply\n         *        </kendo-splitbutton>\n         *    `\n         * })\n         * class AppComponent {\n         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n         *\n         *    public onSplitButtonClick(): void {\n         *      console.log('SplitButton click');\n         *    }\n         * }\n         * ```\n         *\n         */\n        _this.buttonClick = new EventEmitter();\n        /**\n         * Fires each time the user clicks on the drop-down list. The event data contains the data item bound to the clicked list item.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *     selector: 'my-app',\n         *    template: `\n         *        <kendo-splitbutton (itemClick)=\"onSplitButtonItemClick($event)\" [data]=\"data\">\n         *          Reply\n         *      </kendo-splitbutton>\n         *    `\n         * })\n         * class AppComponent {\n         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n         *\n         *   public onSplitButtonItemClick(dataItem?: string): void {\n         *        if (dataItem) {\n         *            console.log(dataItem);\n         *       }\n         *    }\n         * }\n         * ```\n         *\n         */\n        _this.itemClick = new EventEmitter();\n        /**\n         * Fires each time the SplitButton gets focused.\n         */\n        _this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the SplitButton gets blurred.\n         */\n        _this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         */\n        _this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         */\n        _this.close = new EventEmitter();\n        _this.listId = guid();\n        _this.buttonText = '';\n        _this.direction = rtl ? 'rtl' : 'ltr';\n        _this._itemClick = _this.itemClick;\n        _this._blur = _this.onBlur;\n        return _this;\n    }\n    Object.defineProperty(SplitButtonComponent.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * When set to `true`, disables a SplitButton item.\n         */\n        set: function (value) {\n            this._disabled = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"popupSettings\", {\n        get: function () {\n            if (!this._popupSettings) {\n                this._popupSettings = { animate: true, popupClass: '' };\n            }\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the SplitButton.\n         *\n         * The available options are:\n         * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         */\n        set: function (value) {\n            this._popupSettings = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"data\", {\n        get: function () {\n            if (!this._data) {\n                this.data = [];\n            }\n            return this._data;\n        },\n        /**\n         * Sets the data of the SplitButton.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this._data = data || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"openState\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._open;\n        },\n        /**\n         * @hidden\n         */\n        set: function (open) {\n            if (this.disabled) {\n                return;\n            }\n            var eventArgs = new PreventableEvent();\n            if (open) {\n                this.open.emit(eventArgs);\n            }\n            else {\n                this.close.emit(eventArgs);\n            }\n            if (eventArgs.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(open);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"active\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"componentTabIndex\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled ? (-1) : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"isFocused\", {\n        get: function () {\n            return this._isFocused && !this._disabled;\n        },\n        set: function (value) {\n            this._isFocused = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"ariaLabel\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.buttonText + \" splitbutton\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.onButtonFocus = function () {\n        if (!this.isFocused) {\n            this._isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.onButtonClick = function () {\n        this.buttonClick.emit();\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.keydown = function (event) {\n        this.keyDownHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.keypress = function (event) {\n        this.keyPressHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.keyup = function (event) {\n        this.keyUpHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.ngAfterViewInit = function () {\n        this.updateButtonText();\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.hasOwnProperty('text')) {\n            this.updateButtonText();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.togglePopupVisibility = function () {\n        _super.prototype.togglePopupVisibility.call(this);\n        //XXX: call local openState setter to open the popup\n        this.openState = this._open;\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.wrapperContains = function (element) {\n        return this.wrapper === element\n            || this.wrapper.contains(element)\n            || (this.popupRef && this.popupRef.popupElement.contains(element));\n    };\n    Object.defineProperty(SplitButtonComponent.prototype, \"anchorAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: 'left', vertical: 'bottom' };\n            if (this.direction === 'rtl') {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"popupAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: 'left', vertical: 'top' };\n            if (this.direction === 'rtl') {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the SplitButton component.\n     */\n    SplitButtonComponent.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    /**\n     * Blurs the SplitButton component.\n     */\n    SplitButtonComponent.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.blur();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    SplitButtonComponent.prototype.toggle = function (open) {\n        var _this = this;\n        if (this.disabled) {\n            return;\n        }\n        tick(function () { return (_this._toggle((open === undefined) ? !_this._open : open)); });\n    };\n    Object.defineProperty(SplitButtonComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.openState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitButtonComponent.prototype.enterHanlder = function () {\n        if (this.disabled) {\n            return;\n        }\n        if (this.openState) {\n            var focused = this.focusService.focused;\n            if (isPresent(focused) && focused !== -1) {\n                this.emitItemClickHandler(focused);\n            }\n        }\n        else {\n            this.buttonClick.emit();\n        }\n    };\n    SplitButtonComponent.prototype.updateButtonText = function () {\n        var _this = this;\n        if (isDocumentAvailable()) {\n            var innerText_1 = this.wrapper.innerText.split('\\n').join('').trim();\n            //setTimout is needed because of `Expression has changed after it was checked.` error;\n            setTimeout(function () { _this.buttonText = innerText_1; }, 0);\n        }\n    };\n    SplitButtonComponent.prototype._toggle = function (open) {\n        var _this = this;\n        this._open = open;\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n        if (this._open) {\n            this.popupRef = this.popupService.open({\n                anchor: this.button,\n                anchorAlign: this.anchorAlign,\n                animate: this.popupSettings.animate,\n                content: this.popupTemplate,\n                popupAlign: this.popupAlign,\n                popupClass: this.popupClasses\n            });\n            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.openState = false; });\n            this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));\n        }\n    };\n    return SplitButtonComponent;\n}(ListButton));\nexport { SplitButtonComponent };\n",null]}