{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/listbutton/list-button.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-buttons/dist/es/listbutton/list-button.js","mtime":1516893312000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { EventEmitter } from '@angular/core';\nimport { Observable } from \"rxjs/Observable\";\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/merge';\nimport { KeyEvents } from './../navigation/key-events';\nimport { NavigationAction } from './../navigation/navigation-action';\nimport { guid, isDocumentAvailable, isPresent } from './../util';\n/**\n * @hidden\n */\nvar ListButton = /*@__PURE__*/ (function () {\n    function ListButton(focusService, navigationService, wrapperRef, _zone) {\n        this.focusService = focusService;\n        this.navigationService = navigationService;\n        this.wrapperRef = wrapperRef;\n        this._zone = _zone;\n        this._open = false;\n        this._disabled = false;\n        this._active = false;\n        this._popupSettings = { animate: true, popupClass: '' };\n        this.listId = guid();\n        this._isFocused = false;\n        this.wrapperBlurred = new EventEmitter();\n        this.focusService = focusService;\n        this.navigationService = navigationService;\n        this.wrapper = wrapperRef.nativeElement;\n        this.subscribeEvents();\n    }\n    Object.defineProperty(ListButton.prototype, \"popupClasses\", {\n        get: function () {\n            var popupClasses = [\n                'k-list-container',\n                'k-reset',\n                'k-group'\n            ];\n            if (this._popupSettings.popupClass) {\n                popupClasses.push(this._popupSettings.popupClass);\n            }\n            return popupClasses.join(' ');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListButton.prototype, \"openState\", {\n        get: function () {\n            return this._open;\n        },\n        set: function (open) {\n            this._open = open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ListButton.prototype.togglePopupVisibility = function () {\n        if (this._disabled) {\n            return;\n        }\n        this.openState = !this.openState;\n        if (!this.openState) {\n            this.focusService.focus(-1);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.onItemClick = function (index) {\n        var _this = this;\n        this.emitItemClickHandler(index);\n        setTimeout(function () { _this.focusWrapper(); }, 1);\n    };\n    ListButton.prototype.ngOnDestroy = function () {\n        this.openState = false;\n        this.unsubscribeEvents();\n    };\n    ListButton.prototype.subscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.subscribeListItemFocusEvent();\n        this.subscribeComponentBlurredEvent();\n        this.subscribeNavigationEvents();\n    };\n    ListButton.prototype.subscribeListItemFocusEvent = function () {\n        var _this = this;\n        this.focusSubscription = this.focusService.onFocus.subscribe(function () {\n            _this._isFocused = true;\n        });\n    };\n    ListButton.prototype.subscribeComponentBlurredEvent = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            _this.documentClick = Observable\n                .fromEvent(document, 'click')\n                .filter(function (event) {\n                return !_this.wrapperContains(event.target);\n            });\n            _this.componentBlurredSubscription = _this.wrapperBlurred\n                .merge(_this.navigationService.tab, _this.documentClick)\n                .filter(function () { return _this._isFocused; })\n                .subscribe(function () {\n                return _this._zone.run(function () {\n                    _this.blurWrapper();\n                });\n            });\n        });\n    };\n    ListButton.prototype.subscribeNavigationEvents = function () {\n        var _this = this;\n        this.navigationSubscription = this.navigationService.navigate\n            .subscribe(this.focusService.focus.bind(this.focusService));\n        this.enterPressSubscription = this.navigationService.enterpress.subscribe(function () {\n            if (!_this._disabled && !_this._open) {\n                _this._active = true;\n            }\n        });\n        this.enterUpSubscription = this.navigationService.enterup.subscribe(function () {\n            if (!_this._open) {\n                _this._active = false;\n            }\n            _this.enterHanlder();\n            _this.focusWrapper();\n        });\n        this.openSubscription = this.navigationService.open.subscribe(function () {\n            if (!_this._open) {\n                _this.togglePopupVisibility();\n                _this.focusFirstItem();\n            }\n            else {\n                _this.focusWrapper();\n            }\n        });\n        this.closeSubscription = this.navigationService.close\n            .merge(this.navigationService.esc)\n            .subscribe(function () {\n            _this.focusWrapper();\n        });\n    };\n    ListButton.prototype.enterHanlder = function () { }; // tslint:disable-line\n    ListButton.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.unsubscribe(this.componentBlurredSubscription);\n        this.unsubscribe(this.focusSubscription);\n        this.unsubscribe(this.navigationSubscription);\n        this.unsubscribe(this.enterPressSubscription);\n        this.unsubscribe(this.enterUpSubscription);\n        this.unsubscribe(this.openSubscription);\n        this.unsubscribe(this.closeSubscription);\n    };\n    ListButton.prototype.unsubscribe = function (subscription) {\n        if (subscription) {\n            subscription.unsubscribe();\n        }\n    };\n    ListButton.prototype.keyDownHandler = function (event) {\n        this.keyHandler(event);\n    };\n    ListButton.prototype.keyPressHandler = function (event) {\n        this.keyHandler(event, KeyEvents.keypress);\n    };\n    ListButton.prototype.keyUpHandler = function (event) {\n        this.keyHandler(event, KeyEvents.keyup);\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.keyHandler = function (event, keyEvent) {\n        if (this._disabled) {\n            return;\n        }\n        var focused = this.focusService.focused || 0;\n        var eventData = event;\n        var action = this.navigationService.process({\n            altKey: eventData.altKey,\n            current: focused,\n            keyCode: eventData.keyCode,\n            keyEvent: keyEvent,\n            max: this._data ? this._data.length - 1 : 0,\n            min: 0\n        });\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Tab &&\n            (action !== NavigationAction.Enter || (action === NavigationAction.Enter && this._open))) {\n            eventData.preventDefault();\n        }\n    };\n    ListButton.prototype.emitItemClickHandler = function (index) {\n        var dataItem = this._data[index];\n        if (this._itemClick) {\n            this._itemClick.emit(dataItem);\n        }\n        if (dataItem && dataItem.click && !dataItem.disabled) {\n            dataItem.click(dataItem);\n        }\n    };\n    ListButton.prototype.focusFirstItem = function () {\n        var _this = this;\n        if (this._data && isPresent(this._data[0])) {\n            setTimeout(function () { _this.focusService.focus(0); }, 1);\n        }\n    };\n    ListButton.prototype.focusWrapper = function () {\n        if (this._open) {\n            this.togglePopupVisibility();\n            if (this.button && isDocumentAvailable()) {\n                this.button.nativeElement.focus();\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.blurHandler = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        setTimeout(function () {\n            if (!_this.wrapperContains(document.activeElement)) {\n                _this.blurWrapper();\n            }\n        });\n    };\n    ListButton.prototype.wrapperContains = function (element) {\n        return this.wrapper === element || this.wrapper.contains(element);\n    };\n    ListButton.prototype.blurWrapper = function () {\n        if (this._open) {\n            this.togglePopupVisibility();\n        }\n        this._isFocused = false;\n        this._blur.emit();\n    };\n    return ListButton;\n}());\nexport { ListButton };\n",null]}