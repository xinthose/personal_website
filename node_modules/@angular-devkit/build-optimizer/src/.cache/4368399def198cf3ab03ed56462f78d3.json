{"remainingRequest":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/popup.service.js","dependencies":[{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@progress/kendo-angular-popup/dist/es/popup.service.js","mtime":1516894113000},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/cache-loader/dist/cjs.js","mtime":1522427415071},{"path":"/home/adam/Documents/workspace/git/personal_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ApplicationRef, ComponentFactoryResolver, ElementRef, InjectionToken, Injectable, Injector, Inject, Optional, TemplateRef } from '@angular/core';\nimport { PopupComponent } from './popup.component';\n/**\n * Used to inject the Popup container. If not provided, the first root component of\n * the application is used.\n *\n * > The POPUP_CONTAINER can be used only with the [PopupService]({% slug service_popup %}) class.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Popup module\n * import { PopupModule, POPUP_CONTAINER } from '@progress/kendo-angular-popup';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { ElementRef, NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, PopupModule], // import Popup module\n *     bootstrap:    [AppComponent],\n *     providers: [{\n *       provide: POPUP_CONTAINER,\n *       useFactory: () => {\n *          //return the container ElementRef, where the popup will be injected\n *          return { nativeElement: document.body } as ElementRef;\n *       }\n *     }]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n * ```\n */\nexport var POPUP_CONTAINER = new InjectionToken('Popup Container');\n/**\n * A service for opening Popup components dynamically.\n *\n * For more information on how to use this class, refer to the article on\n * the [Popup service]({% slug service_popup %}).\n *\n * @export\n * @class PopupService\n */\nvar PopupService = /*@__PURE__*/ (function () {\n    function PopupService(applicationRef, componentFactoryResolver, injector, container) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n        this.container = container;\n    }\n    Object.defineProperty(PopupService.prototype, \"rootViewContainer\", {\n        /**\n         * Gets the root view container into which the component will be injected.\n         *\n         * @returns {ComponentRef<any>}\n         */\n        get: function () {\n            // https://github.com/angular/angular/blob/4.0.x/packages/core/src/application_ref.ts#L571\n            var rootComponents = this.applicationRef.components || [];\n            if (rootComponents[0]) {\n                return rootComponents[0];\n            }\n            throw new Error(\"\\n            View Container not found! Inject the POPUP_CONTAINER or define a specific ViewContainerRef via the appendTo option.\\n            See http://www.telerik.com/kendo-angular-ui/components/popup/api/POPUP_CONTAINER/ for more details.\\n        \");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupService.prototype, \"rootViewContainerNode\", {\n        /**\n         * Sets or gets the HTML element of the root component container.\n         *\n         * @returns {HTMLElement}\n         */\n        get: function () {\n            return this.container ? this.container.nativeElement : this.getComponentRootNode(this.rootViewContainer);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens a Popup component.\n     *\n     * Created Popups are mounted in the DOM directly in the root application component.\n     *\n     * @param {PopupSettings} options - The options which define the Popup.\n     * @returns {ComponentRef<PopupComponent>} - A reference to the Popup object.\n     *\n     * @example\n     *\n     * ```ts-no-run\n     * _@Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <ng-template #template>\n     *      Popup content\n     *     </ng-template>\n     *     <button #anchor kendoButton (click)=\"toggle(anchor, template)\">Toggle</button>\n     *   `\n     * })\n     * export class AppComponent {\n     *     public popupRef: PopupRef;\n     *\n     *     constructor( private popupService: PopupService ) {}\n     *\n     *     public open(anchor: ElementRef, template: TemplateRef<any>): void {\n     *         if (this.popupRef) {\n     *              this.popupRef.close();\n     *              this.popupRef = null;\n     *              return;\n     *         }\n     *\n     *         this.popupRef = this.popupService.open({\n     *           anchor: anchor,\n     *           content: template\n     *         });\n     *     }\n     * }\n     * ```\n     */\n    PopupService.prototype.open = function (options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _a = this.contentFrom(options.content), component = _a.component, nodes = _a.nodes;\n        var popupComponentRef = this.appendPopup(nodes, options.appendTo);\n        var popupInstance = popupComponentRef.instance;\n        this.projectComponentInputs(popupComponentRef, options);\n        popupComponentRef.changeDetectorRef.detectChanges();\n        if (component) {\n            component.changeDetectorRef.detectChanges();\n        }\n        return {\n            close: function () {\n                // XXX: Destroy is required due to this bug:\n                // https://github.com/angular/angular/issues/15578\n                //\n                if (component) {\n                    component.destroy();\n                }\n                else {\n                    popupComponentRef.instance.content = null;\n                    popupComponentRef.changeDetectorRef.detectChanges();\n                }\n                popupComponentRef.destroy();\n            },\n            content: component,\n            popup: popupComponentRef,\n            popupAnchorViewportLeave: popupInstance.anchorViewportLeave,\n            popupClose: popupInstance.close,\n            popupElement: this.getComponentRootNode(popupComponentRef),\n            popupOpen: popupInstance.open\n        };\n    };\n    PopupService.prototype.appendPopup = function (nodes, container) {\n        var popupComponentRef = this.createComponent(PopupComponent, nodes, container);\n        if (!container) {\n            this.rootViewContainerNode.appendChild(this.getComponentRootNode(popupComponentRef));\n        }\n        return popupComponentRef;\n    };\n    /**\n     * Gets the HTML element for a component reference.\n     *\n     * @param {ComponentRef<any>} componentRef\n     * @returns {HTMLElement}\n     */\n    PopupService.prototype.getComponentRootNode = function (componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    };\n    /**\n     * Gets the `ComponentFactory` instance by its type.\n     *\n     * @param {*} componentClass\n     * @param {*} nodes\n     * @returns {ComponentRef<any>}\n     */\n    PopupService.prototype.getComponentFactory = function (componentClass) {\n        return this.componentFactoryResolver.resolveComponentFactory(componentClass);\n    };\n    /**\n     * Creates a component reference from a `Component` type class.\n     *\n     * @param {*} componentClass\n     * @param {*} nodes\n     * @returns {ComponentRef<any>}\n     */\n    PopupService.prototype.createComponent = function (componentClass, nodes, container) {\n        var factory = this.getComponentFactory(componentClass);\n        if (container) {\n            return container.createComponent(factory, undefined, this.injector, nodes);\n        }\n        else {\n            var component = factory.create(this.injector, nodes);\n            this.applicationRef.attachView(component.hostView);\n            return component;\n        }\n    };\n    /**\n     * Projects the inputs on the component.\n     *\n     * @param {ComponentRef<any>} component\n     * @param {*} options\n     * @returns {ComponentRef<any>}\n     */\n    PopupService.prototype.projectComponentInputs = function (component, options) {\n        Object.getOwnPropertyNames(options)\n            .filter(function (prop) { return prop !== 'content' || options.content instanceof TemplateRef; })\n            .map(function (prop) {\n            component.instance[prop] = options[prop];\n        });\n        return component;\n    };\n    /**\n     * Gets the component and the nodes to append from the `content` option.\n     *\n     * @param {*} content\n     * @returns {any}\n     */\n    PopupService.prototype.contentFrom = function (content) {\n        if (!content || content instanceof TemplateRef) {\n            return { component: null, nodes: [[]] };\n        }\n        var component = this.createComponent(content);\n        var nodes = component ? [component.location.nativeElement] : [];\n        return {\n            component: component,\n            nodes: [\n                nodes // <ng-content>\n            ]\n        };\n    };\n    return PopupService;\n}());\nexport { PopupService };\n",null]}