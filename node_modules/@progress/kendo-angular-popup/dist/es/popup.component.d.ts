import { AfterViewInit, AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, OnInit, OnChanges, OnDestroy, NgZone, Renderer2, TemplateRef } from '@angular/core';
import 'rxjs/add/observable/fromPromise';
import { Align } from './models/align.interface';
import { Collision } from './models/collision.interface';
import { Offset } from './models/offset.interface';
import { PositionMode } from './models/position-mode';
import { AlignService } from './services/align.service';
import { DOMService } from './services/dom.service';
import { PositionService } from './services/position.service';
import { ResizeService } from './services/resize.service';
import { ScrollableService } from './services/scrollable.service';
/**
 * Represents the Kendo UI Popup component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <button #anchor (click)="show=!show">Toggle</button>
 *  <kendo-popup *ngIf="show" [anchor]="anchor">
 *      <strong>Popup content!</strong>
 *  </kendo-popup>
 * `
 * })
 * class AppComponent {
 *   public show: boolean = false;
 * }
 * ```
 */
export declare class PopupComponent implements AfterViewInit, AfterViewChecked, OnInit, OnChanges, OnDestroy {
    container: ElementRef;
    private _alignService;
    private _domService;
    private _cdr;
    private _positionService;
    private _resizeService;
    private _scrollableService;
    private _renderer;
    private _zone;
    /**
     * Controls the Popup animation. By default, the opening and closing animations are enabled.
     *
     * For more information about how to enable and disable them,
     * refer to the section on [Popup animations]({% slug overview_popup %}#toc-animations).
     */
    animate: boolean;
    /**
     * Specifies the element that will be used as an anchor. The Popup opens next to that element.
     *
     * For more information, refer to the section on the
     * [aligning to specific components]({% slug overview_popup %}#toc-align-to-components).
     */
    anchor: ElementRef;
    /**
     * Specifies the anchor pivot point.
     *
     * For more information, refer to the section on
     * [positioning]({% slug overview_popup %}#toc-position).
     */
    anchorAlign: Align;
    /**
     * Configures the collision behavior of the Popup.
     *
     * For more information, refer to the section on
     * [viewport boundary detection]({% slug overview_popup %}#toc-viewport-boundary-detection).
     */
    collision: Collision;
    /**
     * Specifies the pivot point of the Popup.
     *
     * For more information, refer to the section on
     * [positioning]({% slug overview_popup %}#toc-position).
     */
    popupAlign: Align;
    /**
     * Controls whether the component should copy anchor styles.
     */
    copyAnchorStyles: boolean;
    /**
     * Specifies a list of CSS classes to be added to the internal animated element.
     *
     * > For styling the content of the Popup, use this property binding.
     *
     * For more information, refer to the section on
     * [styling]({% slug overview_popup %}#toc-styling).
     */
    popupClass: string | Array<string> | Object;
    /**
     * Specifies the position mode of the component. By default the Popup uses *fixed* mode.
     * Set the option to `absolute` to use an *absolute* positioning.
     *
     * > Use the 'absolute' positioning if mobile browsers with zoom support is targeted.
     *
     * @example
     * ```html
     * <style>
     *  .parent-content {
     *     position: relative;
     *     width: 200px;
     *     height: 200px;
     *     overflow: auto;
     *     margin: 200px auto;
     *     border: 1px solid red;
     *  }
     *  .content {
     *     position: relative;
     *     width: 100px;
     *     height: 100px;
     *     overflow: auto;
     *     margin: 300px;
     *     border: 1px solid blue;
     *  }
     *  .anchor {
     *     position: absolute;
     *     top: 200px;
     *     left: 200px;
     *  }
     * </style>
     * ```
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *   <div class="example-config">
     *      Position mode:
     *      <label><input type="radio" value="fixed" [(ngModel)]="mode" /> Fixed</label>
     *      <label><input type="radio" value="absolute" [(ngModel)]="mode" /> Absolute</label>
     *   </div>
     *   <div class="example-config">
     *       Append to
     *       <label>
     *           <input type="radio" name="place" [value]="1" [(ngModel)]="checked" />
     *           Root component
     *       </label>
     *       <label>
     *           <input type="radio" name="place" [value]="2" [(ngModel)]="checked" />
     *           <span style="color: red">Red Container</span>
     *       </label>
     *       <label>
     *           <input type="radio" name="place" [value]="3" [(ngModel)]="checked" />
     *           <span style="color: blue">Blue Container</span>
     *       </label>
     *   </div>
     *   <div class="example">
     *     <div class="parent-content" [scrollLeft]="250" [scrollTop]="230">
     *         <div class="content" [scrollLeft]="170" [scrollTop]="165">
     *           <button #anchor class="anchor" (click)="show = !show">Toggle</button>
     *           <kendo-popup [positionMode]="mode" [anchor]="anchor" (anchorViewportLeave)="show=false" *ngIf="show && checked === 3">
     *             <ul>
     *                 <li>Item1</li>
     *                 <li>Item2</li>
     *                 <li>Item3</li>
     *             </ul>
     *           </kendo-popup>
     *           <span style="position: absolute; top: 400px; left: 400px">Bottom/Right</span>
     *         </div>
     *         <kendo-popup [positionMode]="mode" [anchor]="anchor" (anchorViewportLeave)="show=false" *ngIf="show && checked === 2">
     *           <ul>
     *               <li>Item1</li>
     *               <li>Item2</li>
     *               <li>Item3</li>
     *           </ul>
     *         </kendo-popup>
     *         <span style="position: absolute; top: 600px; left: 600px">Bottom/Right</span>
     *     </div>
     *     <kendo-popup [positionMode]="mode" [anchor]="anchor" (anchorViewportLeave)="show=false" *ngIf="show && checked === 1">
     *       <ul>
     *           <li>Item1</li>
     *           <li>Item2</li>
     *           <li>Item3</li>
     *       </ul>
     *     </kendo-popup>
     *   </div>
     * `
     * })
     * class AppComponent {
     *   public checked: number = 3;
     *   public mode: string = 'absolute';
     *   public show: boolean = true;
     * }
     * ```
     */
    positionMode: PositionMode;
    /**
     * Specifies the absolute position of the element. The Popup opens next to that point.
     *
     * The Popup pivot point is defined by the `popupAlign` configuration option.
     * The boundary detection is applied by using the window viewport.
     *
     * For more information, refer to the section on
     * [aligning to specific absolute points]({% slug overview_popup %}#toc-align-to-absolute-points).
     */
    offset: Offset;
    /**
     * Fires when the anchor is scrolled outside the screen boundaries.
     *
     * For more information, refer to the section on
     * [closing the Popup after leaving the viewport]({% slug overview_popup %}#toc-closing-after-leaving-the-viewport).
     */
    anchorViewportLeave: EventEmitter<any>;
    /**
     * Fires after the component is closed.
     */
    close: EventEmitter<any>;
    /**
     * Fires after the component is opened and the opening animation ends.
     */
    open: EventEmitter<any>;
    /**
     * @hidden
     */
    content: TemplateRef<any>;
    /**
     * @hidden
     */
    direction: string;
    private resolvedPromise;
    private repositionSubscription;
    private repositionCallback;
    private _currentOffset;
    constructor(container: ElementRef, _alignService: AlignService, _domService: DOMService, _cdr: ChangeDetectorRef, _positionService: PositionService, _resizeService: ResizeService, _scrollableService: ScrollableService, _renderer: Renderer2, _zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    triggerOpen(_event: any): void;
    private currentOffset;
    private setZIndex();
    private reposition();
    private position();
    private getDirection(flipped);
    private onScroll(isInViewPort);
    private copyFontStyles();
    private updateFixedClass();
    private setContainerStyle(name, value);
}
