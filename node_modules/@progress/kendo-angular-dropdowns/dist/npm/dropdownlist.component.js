"use strict";
/* tslint:disable:max-line-length */
/* tslint:disable:no-bitwise */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var merge_1 = require("rxjs/observable/merge");
var interval_1 = require("rxjs/observable/interval");
var concatMap_1 = require("rxjs/operators/concatMap");
var distinctUntilChanged_1 = require("rxjs/operators/distinctUntilChanged");
var filter_1 = require("rxjs/operators/filter");
var map_1 = require("rxjs/operators/map");
var skipWhile_1 = require("rxjs/operators/skipWhile");
var take_1 = require("rxjs/operators/take");
var takeUntil_1 = require("rxjs/operators/takeUntil");
var tap_1 = require("rxjs/operators/tap");
var Subject_1 = require("rxjs/Subject");
var keys_1 = require("./common/keys");
var util_1 = require("./util");
var selection_service_1 = require("./selection.service");
var navigation_service_1 = require("./navigation.service");
var item_template_directive_1 = require("./templates/item-template.directive");
var value_template_directive_1 = require("./templates/value-template.directive");
var header_template_directive_1 = require("./templates/header-template.directive");
var footer_template_directive_1 = require("./templates/footer-template.directive");
var no_data_template_directive_1 = require("./templates/no-data-template.directive");
var navigation_action_1 = require("./navigation-action");
var preventable_event_1 = require("./common/preventable-event");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var kendo_angular_popup_1 = require("@progress/kendo-angular-popup");
var touch_enabled_1 = require("./touch-enabled");
var InternalState;
(function (InternalState) {
    InternalState[InternalState["None"] = 0] = "None";
    InternalState[InternalState["SetInitial"] = 1] = "SetInitial";
    InternalState[InternalState["UseModel"] = 2] = "UseModel";
    InternalState[InternalState["UseExisting"] = 4] = "UseExisting";
    InternalState[InternalState["UseDefault"] = 8] = "UseDefault";
})(InternalState || (InternalState = {}));
/**
 * @hidden
 */
exports.DROPDOWNLIST_VALUE_ACCESSOR = {
    multi: true,
    provide: forms_1.NG_VALUE_ACCESSOR,
    // tslint:disable-next-line:no-use-before-declare
    useExisting: core_1.forwardRef(function () { return DropDownListComponent; })
};
/**
 * Represents the Kendo UI DropDownList component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-dropdownlist [data]="listItems">
 *  </kendo-dropdownlist>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
var DropDownListComponent = /** @class */ (function () {
    function DropDownListComponent(rtl, popupService, selectionService, navigationService, _zone, renderer, hostElement, cdr, touchEnabled) {
        this.popupService = popupService;
        this.selectionService = selectionService;
        this.navigationService = navigationService;
        this._zone = _zone;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.cdr = cdr;
        this.touchEnabled = touchEnabled;
        /**
         * @hidden
         */
        this.id = util_1.guid();
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the readonly state of the component.
         */
        this.readonly = false;
        /**
         * Enables the [filtering]({% slug filtering_ddl %}) functionality of the DropDownList.
         */
        this.filterable = false;
        /**
         * Enables a case-insensitive search. When filtration is disabled, use this option.
         */
        this.ignoreCase = true;
        /**
         * Sets the delay before an item search is performed. When filtration is disabled, use this option.
         */
        this.delay = 500;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Fires each time the value is changed&mdash;
         * when the component is blurred or the value is cleared through the **Clear** button.
         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).
         */
        this.valueChange = new core_1.EventEmitter();
        /**
         * Fires each time the user types in the input field.
         * You can filter the source based on the passed filtration value.
         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).
         *
         * When the value of the component is changed programmatically through its API or form binding
         * (either to `ngModel` or `formControl`), the `valueChange` event is not triggered because of
         * potentially causing a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.filterChange = new core_1.EventEmitter();
        /**
         * Fires each time the item selection is changed.
         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).
         */
        this.selectionChange = new core_1.EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new core_1.EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new core_1.EventEmitter();
        /**
         * Fires each time the user focuses the DropDownList.
         */
        this.onFocus = new core_1.EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the DropDownList gets blurred.
         */
        this.onBlur = new core_1.EventEmitter(); //tslint:disable-line:no-output-rename
        this.listBoxId = util_1.guid();
        this.optionPrefix = util_1.guid();
        this.filterText = "";
        this.isFocused = false;
        this.onTouchedCallback = function (_) { };
        this.onChangeCallback = function (_) { };
        this.word = "";
        this.last = "";
        this.filterFocused = new core_1.EventEmitter();
        this.filterBlurred = new core_1.EventEmitter();
        this.wrapperFocused = new core_1.EventEmitter();
        this.wrapperBlurred = new core_1.EventEmitter();
        this.valueSubject = new Subject_1.Subject();
        this.selectionSubject = new Subject_1.Subject();
        this._state = InternalState.SetInitial;
        this._open = false;
        this._popupSettings = { height: 200, animate: true };
        this.direction = rtl ? 'rtl' : 'ltr';
        this.data = [];
        this.subscribeEvents();
        this.hostElement = hostElement.nativeElement;
        this.popupMouseDownHandler = this.onMouseDown.bind(this);
    }
    Object.defineProperty(DropDownListComponent.prototype, "width", {
        get: function () {
            var wrapperWidth = util_1.isDocumentAvailable() ? this.wrapper.nativeElement.offsetWidth : 0;
            var width = this.popupSettings.width || wrapperWidth;
            var minWidth = isNaN(wrapperWidth) ? wrapperWidth : wrapperWidth + "px";
            var maxWidth = isNaN(width) ? width : width + "px";
            return { min: minWidth, max: maxWidth };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "height", {
        get: function () {
            return this.popupSettings.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "popupOpen", {
        get: function () {
            return this._open;
        },
        set: function (open) {
            if (this.disabled || this.readonly || this.popupOpen === open) {
                return;
            }
            var eventArgs = new preventable_event_1.PreventableEvent();
            if (open) {
                this.open.emit(eventArgs);
            }
            else {
                this.close.emit(eventArgs);
                if (this.filterable && this.isFocused) {
                    this.focus();
                }
            }
            if (eventArgs.isDefaultPrevented()) {
                return;
            }
            this._toggle(open);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "widgetTabIndex", {
        get: function () {
            return this.disabled ? undefined : this.tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "ariaHasPopup", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "ariaExpanded", {
        get: function () {
            return this.popupOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "ariaOwns", {
        get: function () {
            return this.listBoxId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "ariaActivedescendant", {
        get: function () {
            return this.optionPrefix + "-" + util_1.getter(this.value, this.valueField);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "appendTo", {
        get: function () {
            var appendTo = this.popupSettings.appendTo;
            if (!appendTo || appendTo === 'root') {
                return undefined;
            }
            return appendTo === 'component' ? this.container : appendTo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        /**
         * Sets the data of the DropDownList.
         *
         * > The data has to be provided in an array-like list.
         */
        set: function (data) {
            this._data = data || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Sets the value of the DropDownList. It can either be of the primitive (string, numbers) or of the complex (objects) type. To define the type, use the `valuePrimitive` option.
         *
         * > All selected values which are not present in the source are ignored.
         */
        set: function (newValue) {
            this._value = newValue;
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the DropDownList.
         *
         * The available options are:
         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
         * - `width: Number`&mdash;Sets the width of the popup container. By default, the width of the host element is used.
         * - `height: Number`&mdash;Sets the height of the popup container. By default, the height is 200px.
         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
         */
        set: function (settings) {
            this._popupSettings = Object.assign({ animate: true, height: 200 }, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DropDownListComponent.prototype.blurComponent = function () {
        this.wrapperBlurred.emit();
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.blurFilterInput = function () {
        this.filterBlurred.emit();
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.focusComponent = function () {
        this.wrapperFocused.emit();
        if (!this.isFocused) {
            this.isFocused = true;
            this.onFocus.emit();
        }
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.keydown = function (event) {
        var hasSelected = util_1.isPresent(this.selectionService.selected[0]);
        var focused = isNaN(this.selectionService.focused) ? 0 : this.selectionService.focused;
        var offset = 0;
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.filterInput && this.filterInput.nativeElement === document.activeElement && (event.keyCode === keys_1.Keys.home || event.keyCode === keys_1.Keys.end)) {
            return;
        }
        if (!hasSelected) {
            if (event.keyCode === keys_1.Keys.down) {
                offset = -1;
            }
            else if (event.keyCode === keys_1.Keys.up) {
                offset = 1;
            }
        }
        var eventData = event;
        var action = this.navigationService.process({
            current: focused + offset,
            max: this.data.length - 1,
            min: this.defaultItem ? -1 : 0,
            originalEvent: eventData
        });
        var leftRightKeys = (action === navigation_action_1.NavigationAction.Left) || (action === navigation_action_1.NavigationAction.Right);
        if (action !== navigation_action_1.NavigationAction.Undefined &&
            action !== navigation_action_1.NavigationAction.Tab &&
            action !== navigation_action_1.NavigationAction.Backspace &&
            action !== navigation_action_1.NavigationAction.Delete &&
            !(leftRightKeys && this.filterable) &&
            action !== navigation_action_1.NavigationAction.Enter //enter when popup is opened is handled before `handleEnter`
        ) {
            eventData.preventDefault();
        }
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.keypress = function (event) {
        if (!this.filterable) {
            this.onKeyPress(event);
        }
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.click = function () {
        this.wrapper.nativeElement.focus();
        this.popupOpen = !this.popupOpen;
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.onResize = function () {
        if (this._open) {
            var popupWrapper = this.popupRef.popupElement;
            var _a = this.width, min = _a.min, max = _a.max;
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
        }
    };
    Object.defineProperty(DropDownListComponent.prototype, "widgetClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    DropDownListComponent.prototype.ngOnInit = function () {
        this.renderer.removeAttribute(this.hostElement, "tabindex");
        this.createSelectionStream();
        this.createValueStream();
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    DropDownListComponent.prototype.isEmpty = function () {
        return !this.value && !this.defaultItem;
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.onFilterFocus = function () {
        this.filterFocused.emit();
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.popupOpened = function () {
        if (this.filterInput && !this.touchEnabled) {
            var nativeElement_1 = this.filterInput.nativeElement;
            var text_1 = this.filterText || nativeElement_1.value;
            this.nextTick(function () {
                nativeElement_1.focus();
                nativeElement_1.setSelectionRange(text_1.length, text_1.length);
            });
        }
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.ngOnDestroy = function () {
        this._toggle(false);
        this.unsubscribeEvents();
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.ngOnChanges = function (_changes) {
        if (this.valuePrimitive === undefined) {
            this.valuePrimitive = this.valueField ? false : true;
        }
        if (_changes.hasOwnProperty("value")) {
            this.verifySettings(_changes.value.currentValue);
            this._modelValue = _changes.value.currentValue;
        }
        this.setState();
    };
    /**
     * Focuses the DropDownList.
     */
    DropDownListComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.wrapper.nativeElement.focus();
        }
    };
    /**
     * Blurs the DropDownList.
     */
    DropDownListComponent.prototype.blur = function () {
        if (!this.disabled) {
            this.wrapper.nativeElement.blur();
        }
    };
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    DropDownListComponent.prototype.toggle = function (open) {
        var _this = this;
        Promise.resolve(null).then(function () {
            _this._toggle((open === undefined) ? !_this._open : open);
            _this.cdr.markForCheck();
        });
    };
    Object.defineProperty(DropDownListComponent.prototype, "isOpen", {
        /**
         * Returns the current open state of the popup.
         */
        get: function () {
            return this.popupOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the value of the DropDownList.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.
     */
    DropDownListComponent.prototype.reset = function () {
        this._modelValue = undefined;
        this.setState();
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.writeValue = function (value) {
        this.verifySettings(value);
        var isInitial = Boolean(value !== null && this._state & InternalState.SetInitial);
        if ((value === null && this._state & InternalState.UseModel) && this._state & InternalState.SetInitial) {
            return;
        }
        if (isInitial) {
            this._state |= InternalState.UseModel;
        }
        this._modelValue = value;
        this.setState();
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    Object.defineProperty(DropDownListComponent.prototype, "listContainerClasses", {
        /**
         * @hidden
         */
        get: function () {
            var containerClasses = ['k-list-container', 'k-reset'];
            if (this.popupSettings.popupClass) {
                containerClasses.push(this.popupSettings.popupClass);
            }
            return containerClasses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownListComponent.prototype, "buttonClasses", {
        /**
         * @hidden
         */
        get: function () {
            return _a = {},
                _a[this.iconClass] = !this.loading && this.iconClass,
                _a['k-i-arrow-s'] = !this.loading && !this.iconClass,
                _a['k-i-loading'] = this.loading,
                _a['k-icon'] = true,
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DropDownListComponent.prototype.setDefaultItemClasses = function () {
        return {
            'k-list-optionlabel': true
        };
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.getText = function () {
        return this.text;
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.getDefaultItemText = function () {
        return util_1.getter(this.defaultItem, this.textField);
    };
    DropDownListComponent.prototype._toggle = function (open) {
        var _this = this;
        this._open = open;
        if (this.popupRef) {
            this.popupRef.popupElement
                .removeEventListener('mousedown', this.popupMouseDownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
        if (this._open) {
            var horizontalAlign = this.direction === "rtl" ? "right" : "left";
            var anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
            var popupPosition = { horizontal: horizontalAlign, vertical: "top" };
            this.popupRef = this.popupService.open({
                anchor: this.wrapper,
                anchorAlign: anchorPosition,
                animate: this.popupSettings.animate,
                appendTo: this.appendTo,
                content: this.popupTemplate,
                popupAlign: popupPosition,
                popupClass: this.listContainerClasses,
                positionMode: 'absolute'
            });
            var popupWrapper = this.popupRef.popupElement;
            var _a = this.width, min = _a.min, max = _a.max;
            popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
            popupWrapper.setAttribute("dir", this.direction);
            this.popupRef.popupOpen.subscribe(this.popupOpened.bind(this));
            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.popupOpen = false; });
        }
    };
    DropDownListComponent.prototype.createSelectionStream = function () {
        var _this = this;
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        this.selectionSubscription = this.selectionSubject.pipe(map_1.map(function (index) {
            var dataItem = util_1.isPresent(_this.data[index]) ? _this.data[index] : _this.defaultItem;
            return {
                dataItem: dataItem,
                text: util_1.getter(dataItem, _this.textField),
                value: _this.valuePrimitive ? util_1.getter(dataItem, _this.valueField) : dataItem
            };
        }), distinctUntilChanged_1.distinctUntilChanged(function (prev, next) {
            return prev.value === next.value;
        }))
            .subscribe(function (state) {
            _this.dataItem = state.dataItem;
            _this.text = state.text;
            _this.value = state.value;
            _this.selectionChange.emit(state.dataItem);
        });
    };
    DropDownListComponent.prototype.createValueStream = function () {
        var _this = this;
        if (this.valueSubscription) {
            this.valueSubscription.unsubscribe();
        }
        this.valueSubscription = this.valueSubject.pipe(tap_1.tap(function () { _this.popupOpen = false; }), map_1.map(function (dataItem) { return dataItem || _this.defaultItem; }), distinctUntilChanged_1.distinctUntilChanged(function (prev, next) {
            var current = util_1.getter(_this.dataItem, _this.valueField);
            prev = util_1.getter(prev, _this.valueField);
            next = util_1.getter(next, _this.valueField);
            return (prev === next) && (current === next);
        }), map_1.map(function (dataItem) {
            var primitiveValue = util_1.getter(dataItem, _this.valueField);
            var newValue = _this.valuePrimitive ? primitiveValue : dataItem;
            var newText = util_1.getter(dataItem, _this.textField);
            return {
                dataItem: dataItem,
                primitiveValue: primitiveValue,
                text: newText,
                value: newValue
            };
        }))
            .subscribe(function (state) {
            _this.dataItem = state.dataItem;
            _this.value = state.value;
            _this.text = state.text;
            _this.selectionSubject.next(_this.data.findIndex(function (element) {
                return util_1.getter(element, _this.valueField) === util_1.getter(_this.value, _this.valueField, _this.valuePrimitive);
            }));
            _this.emitChange(_this.valuePrimitive ? state.primitiveValue : _this.value);
            if (_this.filterable && _this.filterText) {
                _this.filterText = "";
                _this.cdr.markForCheck();
                _this.filterChange.emit(_this.filterText);
            }
        });
    };
    DropDownListComponent.prototype.subscribeEvents = function () {
        var _this = this;
        if (!util_1.isDocumentAvailable()) {
            return;
        }
        this.changeSubscription = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));
        this.selectSubscription = this.selectionService.onSelect.subscribe(this.handleItemSelect.bind(this));
        this.navigationSubscription = merge_1.merge(this.navigationService.up, this.navigationService.down, this.navigationService.left.pipe(skipWhile_1.skipWhile(function () { return _this.filterable; })), this.navigationService.right.pipe(skipWhile_1.skipWhile(function () { return _this.filterable; })), this.navigationService.home, this.navigationService.end)
            .subscribe(function (event) { return _this.selectionService.select(event.index); });
        this.openSubscription = this.navigationService.open.subscribe(function () { return _this.popupOpen = true; });
        this.closeSubscription = this.navigationService.close.subscribe(function () {
            _this.popupOpen = false;
            _this.wrapper.nativeElement.focus();
        });
        this.enterSubscription =
            merge_1.merge(this.navigationService.enter.pipe(tap_1.tap(function (event) {
                if (_this.popupOpen) {
                    event.originalEvent.preventDefault();
                }
            })), this.navigationService.esc)
                .subscribe(this.handleEnter.bind(this));
        this.filterBlurredSubscription = this.filterBlurred.pipe(concatMap_1.concatMap(function () { return interval_1.interval(10).pipe(take_1.take(1), takeUntil_1.takeUntil(_this.wrapperFocused)); }))
            .subscribe(function () {
            _this.wrapperBlurred.emit();
        });
        this._zone.runOutsideAngular(function () {
            _this.componentBlurredSubscription =
                merge_1.merge(_this.wrapperBlurred.pipe(concatMap_1.concatMap(function () { return interval_1.interval(10).pipe(take_1.take(1), takeUntil_1.takeUntil(_this.filterFocused)); })), _this.navigationService.tab).pipe(filter_1.filter(function () { return _this.isFocused; }))
                    .subscribe(function () { return _this._zone.run(function () {
                    _this.componentBlur();
                }); });
        });
    };
    DropDownListComponent.prototype.unsubscribeEvents = function () {
        if (!util_1.isDocumentAvailable()) {
            return;
        }
        this.changeSubscription.unsubscribe();
        this.selectSubscription.unsubscribe();
        this.navigationSubscription.unsubscribe();
        this.openSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
        this.enterSubscription.unsubscribe();
        this.componentBlurredSubscription.unsubscribe();
        this.filterBlurredSubscription.unsubscribe();
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.valueSubscription) {
            this.valueSubscription.unsubscribe();
        }
    };
    DropDownListComponent.prototype.handleItemChange = function (event) {
        var index = event.indices.length ? event.indices[0] : undefined;
        if (!util_1.isPresent(index)) {
            return;
        }
        var dataItem = util_1.isPresent(this.data[index]) ? this.data[index] : this.defaultItem;
        this.valueSubject.next(dataItem);
    };
    DropDownListComponent.prototype.handleItemSelect = function (event) {
        var index = event.indices.length ? event.indices[0] : undefined;
        if (!util_1.isPresent(index)) {
            return;
        }
        var dataItem = util_1.isPresent(this.data[index]) ? this.data[index] : this.defaultItem;
        if (this.popupOpen) {
            this.selectionSubject.next(index);
        }
        else {
            this.valueSubject.next(dataItem);
        }
    };
    DropDownListComponent.prototype.handleEnter = function () {
        if (this.popupOpen) {
            this.valueSubject.next(this.data[this.selectionService.focused]);
            this.wrapper.nativeElement.focus();
        }
    };
    DropDownListComponent.prototype.verifySettings = function (newValue) {
        var valueOrText = !util_1.isPresent(this.valueField) !== !util_1.isPresent(this.textField);
        if (!core_1.isDevMode()) {
            return;
        }
        if (this.defaultItem && this.valueField && typeof this.defaultItem !== "object") {
            throw new Error("defaultItem and data items must be of same type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/api/DropDownListComponent/#toc-defaultitem");
        }
        if (this.valuePrimitive === true && util_1.isPresent(newValue) && typeof newValue === "object") {
            throw new Error("Expected initial value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection");
        }
        if (this.valuePrimitive === false && util_1.isPresent(newValue) && typeof newValue !== "object") {
            throw new Error("Expected initial value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection");
        }
        if (valueOrText) {
            throw new Error("Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-bind-to-arrays-of-complex-data");
        }
    };
    DropDownListComponent.prototype.componentBlur = function () {
        if (util_1.getter(this._previousValue, this.valueField) !== util_1.getter(this.value, this.valueField)) {
            this.valueSubject.next(this.dataItem);
        }
        else {
            this.popupOpen = false;
        }
        if (this.isFocused) {
            this.isFocused = false;
            this.onBlur.emit();
            this.onTouchedCallback();
        }
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.onMouseDown = function (event) {
        var tagName = event.target.tagName.toLowerCase();
        if (tagName !== "input") {
            event.preventDefault();
        }
    };
    DropDownListComponent.prototype.onKeyPress = function (event) {
        if (event.which === 0 || event.keyCode === keys_1.Keys.enter) {
            return;
        }
        var character = String.fromCharCode(event.charCode || event.keyCode);
        if (this.ignoreCase) {
            character = character.toLowerCase();
        }
        if (character === " ") {
            event.preventDefault();
        }
        this.word += character;
        this.last = character;
        this.search();
    };
    DropDownListComponent.prototype.search = function () {
        var _this = this;
        clearTimeout(this.typingTimeout);
        if (!this.filterable) {
            this.typingTimeout = setTimeout(function () { _this.word = ""; }, this.delay);
            this.selectNext();
        }
    };
    DropDownListComponent.prototype.selectNext = function () {
        var data = this.data.map(function (item, index) {
            return { item: item, itemIndex: index };
        });
        var isInLoop = util_1.sameCharsOnly(this.word, this.last);
        var dataLength = data.length;
        var startIndex = isNaN(this.selectionService.selected[0]) ? 0 : this.selectionService.selected[0];
        var text, index, defaultItem;
        if (this.defaultItem) {
            defaultItem = { item: this.defaultItem, itemIndex: -1 };
            dataLength += 1;
            startIndex += 1;
        }
        startIndex += isInLoop ? 1 : 0;
        data = util_1.shuffleData(data, startIndex, defaultItem);
        index = 0;
        for (; index < dataLength; index++) {
            text = util_1.getter(data[index].item, this.textField);
            var loopMatch = Boolean(isInLoop && util_1.matchText(text, this.last, this.ignoreCase));
            var nextMatch = Boolean(util_1.matchText(text, this.word, this.ignoreCase));
            if (loopMatch || nextMatch) {
                index = data[index].itemIndex;
                break;
            }
        }
        if (index !== dataLength) {
            this.navigate(index);
        }
    };
    DropDownListComponent.prototype.emitChange = function (value) {
        this._modelValue = this.dataItem;
        this.onChangeCallback(value);
        this.valueChange.emit(value);
    };
    DropDownListComponent.prototype.navigate = function (index) {
        this.selectionService.select(index);
    };
    DropDownListComponent.prototype.resolveState = function () {
        var primitiveValue = util_1.getter(this._modelValue, this.valueField, true);
        var existing;
        var state;
        if (this.data.length) {
            state = InternalState.UseExisting;
        }
        else {
            state = util_1.isPresent(this._modelValue) ? InternalState.UseModel : InternalState.UseDefault;
        }
        if (state === InternalState.UseExisting) {
            existing = util_1.resolveValue({ data: this.data, defaultItem: this.defaultItem, value: primitiveValue, valueField: this.valueField });
            if (existing.dataItem !== undefined) {
                state = InternalState.UseExisting;
            }
            else {
                state = util_1.isPresent(this._modelValue) ? InternalState.UseModel : InternalState.UseDefault;
            }
        }
        state |= this._state & InternalState.SetInitial | this._state & InternalState.UseModel;
        this._state = state;
        return existing;
    };
    DropDownListComponent.prototype.setState = function () {
        var resolved = this.resolveState();
        var newState = { value: undefined, text: undefined, dataItem: undefined, selected: [] };
        if (this._state & InternalState.UseModel && !(this._state & InternalState.UseExisting)) {
            newState.value = this.valuePrimitive ? util_1.getter(this._modelValue, this.valueField, true) : this._modelValue;
            newState.dataItem = this._modelValue;
            newState.text = util_1.getter(util_1.isPresent(this._modelValue) ? this._modelValue : this.defaultItem, this.textField);
            newState.selected = [];
            this.selectionService.resetSelection(newState.selected);
            this.selectionService.focused = 0;
        }
        else if (this._state & InternalState.UseExisting) {
            newState.value = this.valuePrimitive ? util_1.getter(resolved.dataItem, this.valueField) : resolved.dataItem;
            newState.dataItem = resolved.dataItem;
            newState.text = util_1.getter(resolved.dataItem, this.textField);
            if (this._state & InternalState.UseModel) {
                this._modelValue = resolved.dataItem;
            }
            this.selectionService.resetSelection(resolved.selected);
            if (this.filterText) {
                this.selectionService.focused = 0;
            }
        }
        else if (this._state & InternalState.UseDefault) {
            newState.value = this.valuePrimitive ? util_1.getter(this.defaultItem, this.valueField, false) : this.defaultItem;
            newState.dataItem = this.defaultItem;
            newState.text = util_1.getter(this.defaultItem, this.textField);
            this.selectionService.resetSelection(this.defaultItem ? [-1] : []);
            this.selectionService.focused = 0;
        }
        if (this._state & InternalState.UseModel) {
            this._state &= ~InternalState.UseModel;
            this._state &= ~InternalState.SetInitial;
            this._previousValue = newState.dataItem;
        }
        else {
            this._previousValue = this.dataItem;
        }
        this.text = newState.text;
        this.value = newState.value;
        this.dataItem = newState.dataItem;
    };
    /**
     * @hidden
     */
    DropDownListComponent.prototype.handleFilter = function (event) {
        this.filterChange.emit(event.target.value);
    };
    DropDownListComponent.prototype.nextTick = function (f) {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            // Use `setTimeout` instead of a resolved promise
            // because the latter does not wait long enough.
            setTimeout(function () { return _this._zone.run(f); });
        });
    };
    DropDownListComponent.decorators = [
        { type: core_1.Component, args: [{
                    exportAs: 'kendoDropDownList',
                    providers: [exports.DROPDOWNLIST_VALUE_ACCESSOR, selection_service_1.SelectionService, navigation_service_1.NavigationService],
                    selector: 'kendo-dropdownlist',
                    template: "\n        <span #wrapper unselectable=\"on\"\n          role=\"listbox\"\n          [id]=\"id\"\n          [ngClass]=\"{\n            'k-dropdown-wrap': true,\n            'k-state-default': !this.disabled,\n            'k-state-disabled': this.disabled,\n            'k-state-focused': this.isFocused\n          }\"\n          [attr.dir]=\"direction\"\n          [attr.readonly]=\"readonly\"\n          [attr.tabindex]=\"widgetTabIndex\"\n          [attr.aria-disabled]=\"disabled\"\n          [attr.aria-readonly]=\"readonly\"\n          [attr.aria-haspopup]=\"ariaHasPopup\"\n          [attr.aria-expanded]=\"ariaExpanded\"\n          [attr.aria-owns]=\"ariaOwns\"\n          [attr.aria-activedescendant]=\"ariaActivedescendant\"\n          (focus)=\"focusComponent()\"\n          (blur)=\"blurComponent()\"\n          (keydown)=\"keydown($event)\"\n          (keypress)=\"keypress($event)\"\n          (click)=\"click()\"\n        >\n            <span [ngClass]=\"{ 'k-input': true }\" unselectable=\"on\">\n               <ng-template *ngIf=\"valueTemplate\"\n                   [templateContext]=\"{\n                       templateRef: valueTemplate.templateRef,\n                       $implicit: dataItem\n                   }\">\n               </ng-template>\n               <ng-template [ngIf]=\"!valueTemplate\">{{ getText() }}</ng-template>\n           </span>\n           <span [ngClass]=\"{ 'k-select': true}\" unselectable=\"on\">\n               <span [ngClass]=\"buttonClasses\"></span>\n           </span>\n           <ng-template #popupTemplate>\n               <!--filterable-->\n\n               <ng-template [ngIf]=\"filterable\">\n                   <span [ngClass]=\"{ 'k-list-filter': true }\" (click)=\"$event.stopImmediatePropagation()\">\n                       <input #filterInput\n                           [dir]=\"direction\"\n                           [(ngModel)]=\"filterText\"\n                           class=\"k-textbox\"\n                           (keydown)=\"keydown($event)\"\n                           (input)=\"handleFilter($event)\"\n                           (focus)=\"onFilterFocus()\"\n                           (blur)=\"blurFilterInput()\" />\n                       <span [ngClass]=\"{ 'k-icon': true, 'k-i-search': true }\" unselectable=\"on\"></span>\n                   </span>\n               </ng-template>\n               <!--default item-->\n               <ng-template [ngIf]=\"defaultItem && !itemTemplate\">\n                   <div [ngClass]=\"setDefaultItemClasses()\" kendoDropDownsSelectable [index]=\"-1\">\n                       {{ getDefaultItemText() }}\n                   </div>\n               </ng-template>\n               <ng-template [ngIf]=\"defaultItem && itemTemplate\">\n                   <div [ngClass]=\"setDefaultItemClasses()\" kendoDropDownsSelectable [index]=\"-1\">\n                       <ng-template\n                           [templateContext]=\"{\n                               templateRef: itemTemplate.templateRef,\n                               $implicit: defaultItem\n                           }\">\n                       </ng-template>\n                   </div>\n               </ng-template>\n               <!--header template-->\n               <ng-template *ngIf=\"headerTemplate\"\n                   [templateContext]=\"{\n                       templateRef: headerTemplate.templateRef\n                   }\">\n               </ng-template>\n               <!--list-->\n               <kendo-list\n                   [id]=\"listBoxId\"\n                   [optionPrefix]=\"optionPrefix\"\n                   [data]=\"data\"\n                   [textField]=\"textField\"\n                   [valueField]=\"valueField\"\n                   [template]=\"itemTemplate\"\n                   [height]=\"height\"\n                   [show]=\"popupOpen\"\n                   >\n               </kendo-list>\n               <!--no-data template-->\n               <div class=\"k-nodata\" *ngIf=\"data.length === 0\">\n                   <ng-template [ngIf]=\"noDataTemplate\"\n                       [templateContext]=\"{\n                           templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined\n                       }\">\n                   </ng-template>\n                   <ng-template [ngIf]=\"!noDataTemplate\">\n                       <div>NO DATA FOUND.</div>\n                   </ng-template>\n               </div>\n               <!--footer template-->\n               <ng-template *ngIf=\"footerTemplate\"\n                   [templateContext]=\"{\n                       templateRef: footerTemplate.templateRef\n                   }\">\n               </ng-template>\n            </ng-template>\n        </span>\n        <ng-template [ngIf]=\"popupOpen\">\n            <kendo-resize-sensor (resize)=\"onResize()\"></kendo-resize-sensor>\n        </ng-template>\n        <ng-container #container></ng-container>\n  "
                },] },
    ];
    /** @nocollapse */
    DropDownListComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [kendo_angular_l10n_1.RTL,] },] },
        { type: kendo_angular_popup_1.PopupService, },
        { type: selection_service_1.SelectionService, },
        { type: navigation_service_1.NavigationService, },
        { type: core_1.NgZone, },
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
        { type: core_1.ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [touch_enabled_1.TOUCH_ENABLED,] },] },
    ]; };
    DropDownListComponent.propDecorators = {
        'id': [{ type: core_1.Input },],
        'iconClass': [{ type: core_1.Input },],
        'loading': [{ type: core_1.Input },],
        'data': [{ type: core_1.Input },],
        'value': [{ type: core_1.Input },],
        'textField': [{ type: core_1.Input },],
        'valueField': [{ type: core_1.Input },],
        'popupSettings': [{ type: core_1.Input },],
        'defaultItem': [{ type: core_1.Input },],
        'disabled': [{ type: core_1.Input },],
        'readonly': [{ type: core_1.Input },],
        'filterable': [{ type: core_1.Input },],
        'ignoreCase': [{ type: core_1.Input },],
        'delay': [{ type: core_1.Input },],
        'valuePrimitive': [{ type: core_1.Input },],
        'tabindex': [{ type: core_1.Input },],
        'tabIndex': [{ type: core_1.Input, args: ["tabIndex",] },],
        'valueChange': [{ type: core_1.Output },],
        'filterChange': [{ type: core_1.Output },],
        'selectionChange': [{ type: core_1.Output },],
        'open': [{ type: core_1.Output },],
        'close': [{ type: core_1.Output },],
        'onFocus': [{ type: core_1.Output, args: ['focus',] },],
        'onBlur': [{ type: core_1.Output, args: ['blur',] },],
        'itemTemplate': [{ type: core_1.ContentChild, args: [item_template_directive_1.ItemTemplateDirective,] },],
        'valueTemplate': [{ type: core_1.ContentChild, args: [value_template_directive_1.ValueTemplateDirective,] },],
        'headerTemplate': [{ type: core_1.ContentChild, args: [header_template_directive_1.HeaderTemplateDirective,] },],
        'footerTemplate': [{ type: core_1.ContentChild, args: [footer_template_directive_1.FooterTemplateDirective,] },],
        'noDataTemplate': [{ type: core_1.ContentChild, args: [no_data_template_directive_1.NoDataTemplateDirective,] },],
        'container': [{ type: core_1.ViewChild, args: ['container', { read: core_1.ViewContainerRef },] },],
        'filterInput': [{ type: core_1.ViewChild, args: ['filterInput',] },],
        'popupTemplate': [{ type: core_1.ViewChild, args: ['popupTemplate',] },],
        'wrapper': [{ type: core_1.ViewChild, args: ['wrapper',] },],
        'widgetClasses': [{ type: core_1.HostBinding, args: ['class.k-widget',] }, { type: core_1.HostBinding, args: ['class.k-dropdown',] }, { type: core_1.HostBinding, args: ['class.k-header',] },],
    };
    return DropDownListComponent;
}());
exports.DropDownListComponent = DropDownListComponent;
