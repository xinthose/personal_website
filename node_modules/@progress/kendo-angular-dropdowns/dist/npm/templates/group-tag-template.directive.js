"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
var core_1 = require("@angular/core");
/**
 * Used for rendering the grouped tag values.
 * It can only be used with the MultiSelect component.
 *
 * The template context is set to the current MultiSelect.
 * To get a reference to the current grouped data items collection, use the `let-dataItems` directive.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiselect kendoMultiSelectSummaryTag [data]="items">
 *    <ng-template kendoMultiSelectGroupTagTemplate let-dataItems>
 *      <span>{{dataItems.length}} item(s) selected</span>
 *    </ng-template>
 *  </kendo-multiselect>
 * `
 * })
 * class AppComponent {
 *   public items: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 *
 * For more examples, refer to the article on [templates]({% slug templates_multiselect %}).
 */
var GroupTagTemplateDirective = /** @class */ (function () {
    function GroupTagTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    GroupTagTemplateDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[kendoMultiSelectGroupTagTemplate]'
                },] },
    ];
    /** @nocollapse */
    GroupTagTemplateDirective.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return GroupTagTemplateDirective;
}());
exports.GroupTagTemplateDirective = GroupTagTemplateDirective;
