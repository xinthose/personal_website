"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var list_item_directive_1 = require("./list-item.directive");
var util_1 = require("./util");
var selection_service_1 = require("./selection.service");
var map_1 = require("rxjs/operators/map");
var merge_1 = require("rxjs/operators/merge");
var disabled_items_service_1 = require("./disabled-items.service");
var data_service_1 = require("./data.service");
var fromEvent_1 = require("rxjs/observable/fromEvent");
/**
 * @hidden
 */
var ListComponent = /** @class */ (function () {
    /* tslint:disable:member-ordering */
    function ListComponent(wrapper, dataService, selectionService, disabledItemsService) {
        this.wrapper = wrapper;
        this.dataService = dataService;
        this.selectionService = selectionService;
        this.disabledItemsService = disabledItemsService;
        this.data = [];
        this.selected = [];
        this.focused = -1;
        this.multipleSelection = false;
        this.onClick = new core_1.EventEmitter();
        this.selectSubscription = this.selectionService
            .onSelect.pipe(map_1.map(function (args) { return args.indices[0]; }), merge_1.merge(this.selectionService.onFocus))
            .subscribe(this.scrollToItem.bind(this));
    }
    /**
     * @hidden
     */
    ListComponent.prototype.firstVisibleItem = function (items) {
        var content = this.content.nativeElement;
        var scrollTop = content.scrollTop;
        var item;
        for (var i = 0; i < items.length; i++) {
            if (items[i].offsetTop + items[i].clientHeight > scrollTop) {
                item = items[i];
                break;
            }
        }
        return item;
    };
    ListComponent.prototype.findCurrentGroup = function () {
        var items = this.wrapper.nativeElement.querySelectorAll("li[role]");
        var index;
        if (items) {
            var firstItem = this.firstVisibleItem(items);
            if (!firstItem) {
                this.currentGroup = undefined;
                return;
            }
            if (firstItem.getAttribute("role") === "group") {
                index = parseInt(firstItem.getAttribute("group-index"), 10);
                this.currentGroup = this.dataService.groupAt(index);
            }
            else {
                index = parseInt(firstItem.getAttribute("absolute-index"), 10);
                this.currentGroup = this.dataService.closestGroup(index);
            }
        }
    };
    ListComponent.prototype.index = function (groupIndex, itemIndex) {
        return groupIndex > 0 ? (this.dataService.groupIndices[groupIndex - 1] + itemIndex) : itemIndex;
    };
    ListComponent.prototype.ngAfterViewInit = function () {
        if (this.show === true) {
            if (this.dataService.grouped) {
                this.findCurrentGroup();
                this.scrollSubscription = fromEvent_1.fromEvent(this.content.nativeElement, "scroll")
                    .subscribe(this.findCurrentGroup.bind(this));
            }
            this.scrollToItem(this.selectionService.focused);
        }
    };
    ListComponent.prototype.ngOnDestroy = function () {
        this.selectSubscription.unsubscribe();
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
    };
    ListComponent.prototype.setContainerClasses = function () {
        return {
            'k-list-scroller': true
        };
    };
    ListComponent.prototype.getHeight = function () {
        return this.height + "px";
    };
    ListComponent.prototype.getText = function (dataItem) {
        return util_1.getter(dataItem, this.textField);
    };
    ListComponent.prototype.getValue = function (dataItem) {
        return util_1.getter(dataItem, this.valueField);
    };
    ListComponent.prototype.isDisabled = function (index) {
        return this.disabledItemsService.isIndexDisabled(index);
    };
    ListComponent.prototype.scrollToItem = function (index) {
        var items = this.items.toArray();
        if (util_1.isPresent(items[index]) && index !== -1) {
            this.scroll(items[index].element);
        }
    };
    ListComponent.prototype.scroll = function (item) {
        if (!item) {
            return;
        }
        var nativeElement = item.nativeElement;
        var content = this.content.nativeElement, itemOffsetTop = nativeElement.offsetTop, itemOffsetHeight = nativeElement.offsetHeight, contentScrollTop = content.scrollTop, contentOffsetHeight = content.clientHeight, bottomDistance = itemOffsetTop + itemOffsetHeight;
        if (contentScrollTop > itemOffsetTop) {
            contentScrollTop = itemOffsetTop;
        }
        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
            contentScrollTop = (bottomDistance - contentOffsetHeight);
        }
        content.scrollTop = contentScrollTop;
    };
    ListComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-list',
                    template: "\n    <div *ngIf=\"dataService.grouped\" class='k-outer-group-header k-first'>\n        <ng-template *ngIf=\"fixedGroupTemplate\"\n            [templateContext]=\"{\n                templateRef: fixedGroupTemplate.templateRef,\n                $implicit: currentGroup?.value\n            }\">\n        </ng-template>\n        <ng-template [ngIf]=\"!fixedGroupTemplate\"><strong>{{ currentGroup?.value.toUpperCase() }}</strong> </ng-template>\n    </div>\n    <div #content [ngClass]=\"setContainerClasses()\" [style.maxHeight]=\"getHeight()\" unselectable=\"on\">\n    <ul role=\"listbox\" class=\"k-list k-reset\" [attr.id]=\"id\" [attr.aria-hidden]=\"!show\">\n         <ng-template *ngIf=\"!dataService.grouped\" ngFor let-dataItem let-index=\"index\" [ngForOf]=\"data\">\n            <li\n                role=\"option\"\n                kendoDropDownsSelectable\n                [index]=\"index\"\n                [multipleSelection]=\"multipleSelection\"\n                [attr.id]=\"optionPrefix + '-' + getValue(dataItem)\"\n                [attr.tabIndex]=\"-1\"\n                [ngClass]=\"{ 'k-item': true, 'k-state-disabled': isDisabled(index) }\">\n                <ng-template *ngIf=\"template\"\n                    [templateContext]=\"{\n                        templateRef: template.templateRef,\n                        $implicit: dataItem\n                    }\">\n                </ng-template>\n                <ng-template [ngIf]=\"!template\">{{ getText(dataItem) }}</ng-template>\n            </li>\n         </ng-template>\n         <ng-template *ngIf=\"dataService.grouped\" ngFor let-dataItem [ngForOf]=\"dataService.data\">\n            <li\n                *ngIf=\"dataItem.header && dataItem.index\"\n                role=\"group\"\n                class='k-outer-group-header'\n                [attr.group-index]=\"dataItem.index\"\n                [attr.id]=\"optionPrefix + '-' + getValue(dataItem.value)\"\n                [attr.tabIndex]=\"-1\">\n                    <ng-template *ngIf=\"groupTemplate\"\n                          [templateContext]=\"{\n                            templateRef: groupTemplate.templateRef,\n                            $implicit: dataItem.value\n                    }\">\n                    </ng-template>\n                    <ng-template [ngIf]=\"!groupTemplate\"><strong> {{ dataItem.value.toUpperCase() }}</strong> </ng-template>\n              </li>\n            <li\n                *ngIf=\"!dataItem.header\"\n                role=\"option\"\n                kendoDropDownsSelectable\n                [multipleSelection]=\"multipleSelection\"\n                [index]=\"dataItem.offsetIndex\"\n                [attr.absolute-index]=\"dataItem.index\"\n                [attr.id]=\"optionPrefix + '-' + getValue(dataItem.value)\"\n                [attr.tabIndex]=\"-1\"\n                [ngClass]=\"{ 'k-item': true, 'k-state-disabled': isDisabled(dataItem.offsetIndex) }\">\n                <ng-template *ngIf=\"template\"\n                    [templateContext]=\"{\n                        templateRef: template.templateRef,\n                        $implicit: dataItem.value\n                    }\">\n                </ng-template>\n                <ng-template [ngIf]=\"!template\">{{ getText(dataItem.value) }}</ng-template>\n            </li>\n        </ng-template>\n    </ul>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    ListComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: data_service_1.DataService, },
        { type: selection_service_1.SelectionService, },
        { type: disabled_items_service_1.DisabledItemsService, },
    ]; };
    ListComponent.propDecorators = {
        'data': [{ type: core_1.Input },],
        'selected': [{ type: core_1.Input },],
        'focused': [{ type: core_1.Input },],
        'textField': [{ type: core_1.Input },],
        'valueField': [{ type: core_1.Input },],
        'height': [{ type: core_1.Input },],
        'template': [{ type: core_1.Input },],
        'groupTemplate': [{ type: core_1.Input },],
        'fixedGroupTemplate': [{ type: core_1.Input },],
        'show': [{ type: core_1.Input },],
        'id': [{ type: core_1.Input },],
        'optionPrefix': [{ type: core_1.Input },],
        'multipleSelection': [{ type: core_1.Input },],
        'onClick': [{ type: core_1.Output },],
        'items': [{ type: core_1.ViewChildren, args: [list_item_directive_1.ListItemDirective,] },],
        'content': [{ type: core_1.ViewChild, args: ['content',] },],
    };
    return ListComponent;
}());
exports.ListComponent = ListComponent;
