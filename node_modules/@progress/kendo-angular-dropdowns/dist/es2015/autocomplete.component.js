/* tslint:disable:no-null-keyword */
/* tslint:disable:max-line-length */
/* tslint:disable:no-bitwise */
import { Component, Renderer2, forwardRef, ElementRef, Input, Output, EventEmitter, ContentChild, ViewChild, ViewContainerRef, HostBinding, Optional, Inject, isDevMode, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SearchBarComponent } from './searchbar.component';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { HeaderTemplateDirective } from './templates/header-template.directive';
import { FooterTemplateDirective } from './templates/footer-template.directive';
import { SelectionService } from './selection.service';
import { NavigationService } from './navigation.service';
import { Subject } from 'rxjs/Subject';
import { merge } from 'rxjs/observable/merge';
import { filter } from 'rxjs/operators/filter';
import { isPresent, guid, isDocumentAvailable, getter, isChanged } from './util';
import { NavigationAction } from './navigation-action';
import { NoDataTemplateDirective } from './templates/no-data-template.directive';
import { Keys } from './common/keys';
import { PreventableEvent } from './common/preventable-event';
import { RTL } from '@progress/kendo-angular-l10n';
import { PopupService } from '@progress/kendo-angular-popup';
var InternalState;
(function (InternalState) {
    InternalState[InternalState["None"] = 0] = "None";
    InternalState[InternalState["SetInitial"] = 1] = "SetInitial";
    InternalState[InternalState["UseInitial"] = 2] = "UseInitial";
})(InternalState || (InternalState = {}));
const NO_VALUE = "";
/**
 * @hidden
 */
export const AUTOCOMPLETE_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line:no-use-before-declare
    useExisting: forwardRef(() => AutoCompleteComponent)
};
/**
 * Represents the Kendo UI AutoComplete component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-autocomplete
 *      [data]="listItems"
 *      [placeholder]="placeholder"
 *  >
 * `
 * })
 * class AppComponent {
 *   public placeholder: string = 'Type "it" for suggestions';
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
export class AutoCompleteComponent {
    constructor(rtl, popupService, selectionService, navigationService, cdr, renderer, wrapper) {
        this.popupService = popupService;
        this.selectionService = selectionService;
        this.navigationService = navigationService;
        this.cdr = cdr;
        this.renderer = renderer;
        /**
         * @hidden
         */
        this.id = guid();
        /**
         * The hint displayed when the component is empty.
         *
         */
        this.placeholder = "";
        /**
         * @hidden
         *
         * If set to `true`, renders a button on hovering over the component. Clicking this button resets the value of the component to `undefined` and triggers the `change` event.
         */
        this.clearButton = true;
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the readonly state of the component.
         */
        this.readonly = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Enables the filter functionality. If set to `true`, the component emits the `filterChange` event.
         */
        this.filterable = false;
        /**
         * Fires each time the value is changed&mdash;
         * when the component is blurred or the value is cleared through the **Clear** button.
         * For more details, refer to the example on [events]({% slug overview_autocomplete %}#toc-events).
         *
         * When the value of the component is changed programmatically through its API or form binding
         * (either to `ngModel` or `formControl`), the `valueChange` event is not triggered because of
         * potentially causing a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user types in the input field.
         * You can filter the source based on the passed filtration value.
         * For more details, refer to the example on [events]({% slug overview_autocomplete %}#toc-events).
         */
        this.filterChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the user focuses the AutoComplete.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the AutoComplete gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        this.listBoxId = guid();
        this.optionPrefix = guid();
        this.onChangeCallback = (_value) => { };
        this.onTouchedCallback = (_) => { };
        this.popupMouseDownHandler = (event) => event.preventDefault();
        this._popupSettings = { height: 200, animate: true };
        this._open = false;
        this._modelValue = "";
        this._value = "";
        this._previousValue = NO_VALUE;
        this._state = InternalState.SetInitial;
        this._filtering = false;
        this.valueChangeSubject = new Subject();
        this._isFocused = false;
        this.direction = rtl ? 'rtl' : 'ltr';
        this.wrapper = wrapper.nativeElement;
        this.data = [];
        this.subscribeEvents();
        this.selectionService.resetSelection([-1]);
    }
    get width() {
        let wrapperOffsetWidth = 0;
        if (isDocumentAvailable()) {
            wrapperOffsetWidth = this.wrapper.offsetWidth;
        }
        const width = this.popupSettings.width || wrapperOffsetWidth;
        const minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : `${wrapperOffsetWidth}px`;
        const maxWidth = isNaN(width) ? width : `${width}px`;
        return { min: minWidth, max: maxWidth };
    }
    get height() {
        return this.popupSettings.height;
    }
    get listContainerClasses() {
        const containerClasses = ['k-list-container', 'k-reset'];
        if (this.popupSettings.popupClass) {
            containerClasses.push(this.popupSettings.popupClass);
        }
        return containerClasses;
    }
    get suggestion() {
        if (!this.text || !this.suggestedText) {
            this.suggestedText = undefined;
            return;
        }
        const hasMatch = this.suggestedText.toLowerCase().startsWith(this.text.toLowerCase());
        const shouldSuggest = this.suggest && !this.backspacePressed;
        if (shouldSuggest && hasMatch) {
            return this.suggestedText;
        }
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    set popupOpen(open) {
        if (this.disabled || this.readonly || this.popupOpen === open) {
            return;
        }
        const eventArgs = new PreventableEvent();
        if (open && !this.popupOpen) {
            this.open.emit(eventArgs);
        }
        if (!open && this.popupOpen) {
            this.close.emit(eventArgs);
        }
        if (eventArgs.isDefaultPrevented()) {
            return;
        }
        this._toggle(open);
    }
    get popupOpen() {
        return this._open;
    }
    get activeDescendant() {
        return this.optionPrefix + "-" + this.value;
    }
    /**
     * Sets the data of the AutoComplete.
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        return this._data;
    }
    /**
     * Sets the value of the AutoComplete.
     *
     */
    set value(newValue) {
        this.verifySettings(newValue);
        this._value = newValue || NO_VALUE;
        this.cdr.markForCheck();
    }
    get value() {
        return this._value || NO_VALUE;
    }
    /**
     * Configures the popup of the AutoComplete.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used  If set to `auto`, the component automatically adjusts the width of the popup, so no item labels are wrapped.
     * - `height: Number`&mdash;Sets the height of the popup container. By default, the height is 200px.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ height: 200, animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    get widgetClasses() {
        return true;
    }
    get isFocused() {
        return this._isFocused;
    }
    set isFocused(isFocused) {
        this._isFocused = isFocused;
    }
    get isDisabled() {
        return this.disabled;
    }
    get widgetHeight() {
        return this.popupSettings.height + "px";
    }
    get dir() {
        return this.direction;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.wrapper, "tabindex");
    }
    ngOnDestroy() {
        this._toggle(false);
        this.unsubscribeEvents();
    }
    ngOnChanges(changes) {
        const isInitial = Boolean(changes.value && changes.value.firstChange || (isChanged("value", changes) && (this._state & InternalState.SetInitial)));
        if (isInitial) {
            this._state |= InternalState.UseInitial;
        }
        if (changes.hasOwnProperty("value")) {
            this._modelValue = changes.value.currentValue;
        }
        const STATE_PROPS = /(data|value|textField|valueField|valuePrimitive)/g;
        if (STATE_PROPS.test(Object.keys(changes).join())) {
            this.setState();
        }
        const shouldSuggest = this.suggest && this.data && this.data.length && this.value;
        if (shouldSuggest) {
            this.suggestedText = getter(this.data[0], this.valueField);
        }
    }
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        Promise.resolve(null).then(() => {
            this._toggle((open === undefined) ? !this._open : open);
            this.cdr.markForCheck();
        });
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this.popupOpen;
    }
    /**
     * Resets the value of the AutoComplete.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.
     */
    reset() {
        this._modelValue = NO_VALUE;
        this.setState();
    }
    /**
     * @hidden
     */
    clearValue(event) {
        event.stopImmediatePropagation();
        this.focus();
        this._filtering = true;
        this.change(NO_VALUE);
        this._filtering = false;
        this.selectionService.resetSelection([]);
    }
    /**
     * @hidden
     */
    writeValue(value) {
        const isInitial = Boolean(value !== null && this._state & InternalState.SetInitial);
        if (value === null && this._state & InternalState.SetInitial) {
            return;
        }
        if (isInitial) {
            this._state |= InternalState.UseInitial;
        }
        this._modelValue = value;
        this.setState();
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    popupOpened() {
        this.popupWidth = this.width.max;
        this.popupMinWidth = this.width.min;
    }
    /**
     * Focuses the AutoComplete.
     */
    focus() {
        if (!this.disabled) {
            this.searchbar.focus();
        }
    }
    /**
     * Blurs the AutoComplete.
     */
    blur() {
        if (!this.disabled) {
            this.searchbar.blur();
        }
    }
    /**
     * @hidden
     */
    onResize() {
        if (this._open) {
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
        }
    }
    emitChange() {
        if (this.value === this._previousValue) {
            return;
        }
        this._modelValue = this.value;
        this._previousValue = this.value;
        this.onChangeCallback(this.value);
        this.valueChange.emit(this.value);
    }
    verifySettings(newValue) {
        if (!isDevMode()) {
            return;
        }
        if (isPresent(newValue) && typeof newValue !== "string") {
            throw new Error("Expected value of type string. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/autocomplete/#toc-value");
        }
    }
    search(text) {
        const index = text.length ? this.data.findIndex(this.findIndexPredicate(text)) : -1;
        this.selectionService.focus(index);
        if (this.suggest) {
            this.suggestedText = getter(this.data[index], this.valueField);
        }
    }
    navigate(index) {
        if (!this.popupOpen) {
            return;
        }
        if (index < 0 || index > this.data.length) {
            index = 0;
        }
        this.selectionService.focus(index);
    }
    /**
     * @hidden
     */
    handleNavigate(event) {
        const focused = isNaN(this.selectionService.focused) ? 0 : this.selectionService.focused;
        const hasFocused = isPresent(focused);
        let offset = 0;
        if (this.disabled || this.readonly) {
            return;
        }
        if (!hasFocused) {
            if (event.keyCode === Keys.down) {
                offset = -1;
            }
            else if (event.keyCode === Keys.up) {
                offset = 1;
            }
        }
        const action = this.navigationService.process({
            current: focused + offset,
            max: this.data.length - 1,
            min: 0,
            originalEvent: event
        });
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Backspace &&
            action !== NavigationAction.Delete &&
            action !== NavigationAction.Home &&
            action !== NavigationAction.End &&
            action !== NavigationAction.Left &&
            action !== NavigationAction.Right &&
            ((action === NavigationAction.Enter && this.popupOpen) || action !== NavigationAction.Enter)) {
            event.preventDefault();
        }
    }
    handleEnter(event) {
        const focused = this.selectionService.focused;
        let value;
        this._filtering = false;
        if (this.popupOpen) {
            event.originalEvent.preventDefault();
        }
        if (focused >= 0) {
            value = getter(this.data[focused], this.valueField);
        }
        else {
            const match = this.suggest && this.suggestedText && this.data.length &&
                getter(this.data[0], this.valueField, true).toLowerCase() === this.searchbar.value.toLowerCase();
            if (this.popupOpen && match) {
                value = this.suggestedText;
            }
            else {
                value = this.searchbar.value;
            }
        }
        this.change(value);
    }
    /**
     * @hidden
     */
    searchBarChange(text) {
        const currentTextLength = this.text.length;
        this.backspacePressed = (text.length < currentTextLength) ? true : false;
        this.text = text;
        this.popupOpen = text.length > 0;
        this._filtering = true;
        if (this.filterable) {
            this.selectionService.focused = -1;
            this.filterChange.emit(text);
        }
        else {
            this.search(text);
        }
    }
    /**
     * @hidden
     */
    handleFocus() {
        this.isFocused = true;
        this.onFocus.emit();
    }
    /**
     * @hidden
     */
    handleBlur() {
        this._filtering = false;
        const focused = this.filterable ? this.selectionService.focused : -1;
        let dataItem;
        let text;
        let value = this.value;
        if (focused !== -1) {
            dataItem = this.data[focused];
            text = getter(dataItem, this.valueField, true) || "";
        }
        else {
            text = this.searchbar.value;
        }
        if (text === this.searchbar.value) {
            value = text;
        }
        else if (text && text.toLowerCase() === this.searchbar.value.toLowerCase()) {
            this.selectionService.resetSelection([]);
            value = this.searchbar.value;
        }
        this.change(value);
        this.popupOpen = false;
        this.isFocused = false;
        this.onBlur.emit();
        this.onTouchedCallback();
    }
    setState() {
        if (this._filtering) {
            return;
        }
        if (this._state & InternalState.UseInitial) {
            this._state &= ~InternalState.UseInitial;
            this._state &= ~InternalState.SetInitial;
            this._previousValue = this._modelValue;
        }
        else {
            this._previousValue = this.value;
        }
        this.value = this._modelValue;
        this.text = this.value;
    }
    change(value) {
        this.popupOpen = false;
        this.valueChangeSubject.next(value);
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.valueChangeSubscribtion = this.valueChangeSubject.pipe(filter((candidate) => {
            return !(this.value === candidate && this.text === candidate);
        }))
            .subscribe((value) => {
            this.value = value;
            this.text = value;
            if (this.filterable && !this.value && !this.text) {
                this.filterChange.emit("");
            }
            this.emitChange();
        });
        this.changeSubscribtion = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));
        this.focusSubscribtion = this.selectionService.onFocus.subscribe(this.handleItemFocus.bind(this));
        this.navigationSubscribtion = merge(this.navigationService.up, this.navigationService.down).subscribe((event) => this.navigate(event.index));
        this.closeSubscription = this.navigationService.close.subscribe(() => this.popupOpen = false);
        this.enterSubscription = this.navigationService.enter.subscribe(this.handleEnter.bind(this));
        this.escSubscription = this.navigationService.esc.subscribe(this.handleBlur.bind(this));
    }
    unsubscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.changeSubscribtion.unsubscribe();
        this.navigationSubscribtion.unsubscribe();
        this.closeSubscription.unsubscribe();
        this.enterSubscription.unsubscribe();
        this.escSubscription.unsubscribe();
    }
    handleItemChange(event) {
        const index = event.indices.length ? event.indices[0] : undefined;
        this._filtering = false;
        this.selectionService.resetSelection([-1]);
        if (!isPresent(index)) {
            return;
        }
        let text = getter(this.data[index], this.valueField);
        this.change(text);
    }
    handleItemFocus(_event) {
        const focused = this.selectionService.focused;
        const shouldSuggest = Boolean(this.suggest && this.data && this.data.length && focused >= 0);
        if (shouldSuggest) {
            this.suggestedText = getter(this.data[focused], this.valueField);
        }
    }
    _toggle(open) {
        this._open = open;
        if (this.popupRef) {
            this.popupRef.popupElement
                .removeEventListener('mousedown', this.popupMouseDownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
        if (this._open) {
            this.popupRef = this.popupService.open({
                anchor: this.wrapper,
                animate: this.popupSettings.animate,
                appendTo: this.appendTo,
                content: this.popupTemplate,
                popupClass: this.listContainerClasses,
                positionMode: 'absolute'
            });
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
            popupWrapper.setAttribute("dir", this.direction);
            this.popupRef.popupAnchorViewportLeave.subscribe(() => this.popupOpen = false);
        }
    }
    findIndexPredicate(text) {
        return (item) => {
            let itemText = getter(item, this.valueField);
            itemText = itemText === undefined ? "" : itemText.toString().toLowerCase();
            return itemText.startsWith(text.toLowerCase());
        };
    }
}
AutoCompleteComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoAutoComplete',
                providers: [AUTOCOMPLETE_VALUE_ACCESSOR, SelectionService, NavigationService],
                selector: 'kendo-autocomplete',
                template: `
        <kendo-searchbar #searchbar
            [role]="'textbox'"
            [id]="id"
            [listId]="listBoxId"
            [activeDescendant]="activeDescendant"
            [userInput]="text"
            [suggestedText]="suggestion"
            [disabled]="disabled"
            [readonly]="readonly"
            [tabIndex]="tabIndex"
            [popupOpen]="popupOpen"
            [placeholder]="placeholder"
            (onNavigate)="handleNavigate($event)"
            (valueChange)="searchBarChange($event)"
            (onBlur)="handleBlur()"
            (onFocus)="handleFocus()"
        ></kendo-searchbar>
        <span *ngIf="!loading && !readonly && (clearButton && text?.length)" class="k-icon k-clear-value k-i-close" title="clear" role="button" tabindex="-1" (click)="clearValue($event)" (mousedown)="$event.preventDefault()">
</span>
        <span *ngIf="loading" class="k-icon k-i-loading"></span>
        <ng-template #popupTemplate>
            <!--header template-->
            <ng-template *ngIf="headerTemplate"
                [templateContext]="{
                    templateRef: headerTemplate.templateRef
                }">
            </ng-template>
            <!--list-->
            <kendo-list
                [id]="listBoxId"
                [optionPrefix]="optionPrefix"
                [data]="data"
                [textField]="valueField"
                [valueField]="valueField"
                [template]="template"
                [height]="height"
                [show]="popupOpen"
            >
            </kendo-list>
            <!--no-data template-->
            <div class="k-nodata" *ngIf="data.length === 0">
                <ng-template [ngIf]="noDataTemplate"
                    [templateContext]="{
                        templateRef: noDataTemplate?.templateRef
                    }">
                </ng-template>
                <ng-template [ngIf]="!noDataTemplate">
                    <div>NO DATA FOUND.</div>
                </ng-template>
            </div>
            <!--footer template-->
            <ng-template *ngIf="footerTemplate"
                [templateContext]="{
                    templateRef: footerTemplate.templateRef
                }">
            </ng-template>
        </ng-template>
        <ng-template [ngIf]="popupOpen">
            <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
        </ng-template>
        <ng-container #container></ng-container>
  `
            },] },
];
/** @nocollapse */
AutoCompleteComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
    { type: PopupService, },
    { type: SelectionService, },
    { type: NavigationService, },
    { type: ChangeDetectorRef, },
    { type: Renderer2, },
    { type: ElementRef, },
];
AutoCompleteComponent.propDecorators = {
    'id': [{ type: Input },],
    'data': [{ type: Input },],
    'value': [{ type: Input },],
    'valueField': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'popupSettings': [{ type: Input },],
    'loading': [{ type: Input },],
    'clearButton': [{ type: Input },],
    'suggest': [{ type: Input },],
    'disabled': [{ type: Input },],
    'readonly': [{ type: Input },],
    'tabindex': [{ type: Input },],
    'tabIndex': [{ type: Input, args: ["tabIndex",] },],
    'filterable': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'filterChange': [{ type: Output },],
    'open': [{ type: Output },],
    'close': [{ type: Output },],
    'onFocus': [{ type: Output, args: ['focus',] },],
    'onBlur': [{ type: Output, args: ['blur',] },],
    'template': [{ type: ContentChild, args: [ItemTemplateDirective,] },],
    'headerTemplate': [{ type: ContentChild, args: [HeaderTemplateDirective,] },],
    'footerTemplate': [{ type: ContentChild, args: [FooterTemplateDirective,] },],
    'noDataTemplate': [{ type: ContentChild, args: [NoDataTemplateDirective,] },],
    'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] },],
    'popupTemplate': [{ type: ViewChild, args: ['popupTemplate',] },],
    'searchbar': [{ type: ViewChild, args: [SearchBarComponent,] },],
    'widgetClasses': [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-autocomplete',] }, { type: HostBinding, args: ['class.k-header',] },],
    'isFocused': [{ type: HostBinding, args: ['class.k-state-focused',] },],
    'isDisabled': [{ type: HostBinding, args: ['class.k-state-disabled',] },],
    'widgetHeight': [{ type: HostBinding, args: ['style.max-height',] },],
    'dir': [{ type: HostBinding, args: ['attr.dir',] },],
};
