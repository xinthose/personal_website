/* tslint:disable:max-line-length */
/* tslint:disable:no-bitwise */
import { Component, Renderer2, forwardRef, ElementRef, Input, Output, HostBinding, EventEmitter, ContentChild, ViewChild, ViewContainerRef, isDevMode, Optional, Inject, NgZone, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { merge } from 'rxjs/observable/merge';
import { interval } from 'rxjs/observable/interval';
import { concatMap } from 'rxjs/operators/concatMap';
import { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';
import { filter } from 'rxjs/operators/filter';
import { map } from 'rxjs/operators/map';
import { skipWhile } from 'rxjs/operators/skipWhile';
import { take } from 'rxjs/operators/take';
import { takeUntil } from 'rxjs/operators/takeUntil';
import { tap } from 'rxjs/operators/tap';
import { Subject } from 'rxjs/Subject';
import { Keys } from './common/keys';
import { isPresent, guid, isDocumentAvailable, getter, resolveValue, shuffleData, sameCharsOnly, matchText } from './util';
import { SelectionService } from './selection.service';
import { NavigationService } from './navigation.service';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { ValueTemplateDirective } from './templates/value-template.directive';
import { HeaderTemplateDirective } from './templates/header-template.directive';
import { FooterTemplateDirective } from './templates/footer-template.directive';
import { NoDataTemplateDirective } from './templates/no-data-template.directive';
import { NavigationAction } from './navigation-action';
import { PreventableEvent } from './common/preventable-event';
import { RTL } from '@progress/kendo-angular-l10n';
import { PopupService } from '@progress/kendo-angular-popup';
import { TOUCH_ENABLED } from './touch-enabled';
var InternalState;
(function (InternalState) {
    InternalState[InternalState["None"] = 0] = "None";
    InternalState[InternalState["SetInitial"] = 1] = "SetInitial";
    InternalState[InternalState["UseModel"] = 2] = "UseModel";
    InternalState[InternalState["UseExisting"] = 4] = "UseExisting";
    InternalState[InternalState["UseDefault"] = 8] = "UseDefault";
})(InternalState || (InternalState = {}));
/**
 * @hidden
 */
export const DROPDOWNLIST_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line:no-use-before-declare
    useExisting: forwardRef(() => DropDownListComponent)
};
/**
 * Represents the Kendo UI DropDownList component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-dropdownlist [data]="listItems">
 *  </kendo-dropdownlist>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
export class DropDownListComponent {
    constructor(rtl, popupService, selectionService, navigationService, _zone, renderer, hostElement, cdr, touchEnabled) {
        this.popupService = popupService;
        this.selectionService = selectionService;
        this.navigationService = navigationService;
        this._zone = _zone;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.cdr = cdr;
        this.touchEnabled = touchEnabled;
        /**
         * @hidden
         */
        this.id = guid();
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the readonly state of the component.
         */
        this.readonly = false;
        /**
         * Enables the [filtering]({% slug filtering_ddl %}) functionality of the DropDownList.
         */
        this.filterable = false;
        /**
         * Enables a case-insensitive search. When filtration is disabled, use this option.
         */
        this.ignoreCase = true;
        /**
         * Sets the delay before an item search is performed. When filtration is disabled, use this option.
         */
        this.delay = 500;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Fires each time the value is changed&mdash;
         * when the component is blurred or the value is cleared through the **Clear** button.
         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user types in the input field.
         * You can filter the source based on the passed filtration value.
         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).
         *
         * When the value of the component is changed programmatically through its API or form binding
         * (either to `ngModel` or `formControl`), the `valueChange` event is not triggered because of
         * potentially causing a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.filterChange = new EventEmitter();
        /**
         * Fires each time the item selection is changed.
         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the user focuses the DropDownList.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the DropDownList gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        this.listBoxId = guid();
        this.optionPrefix = guid();
        this.filterText = "";
        this.isFocused = false;
        this.onTouchedCallback = (_) => { };
        this.onChangeCallback = (_) => { };
        this.word = "";
        this.last = "";
        this.filterFocused = new EventEmitter();
        this.filterBlurred = new EventEmitter();
        this.wrapperFocused = new EventEmitter();
        this.wrapperBlurred = new EventEmitter();
        this.valueSubject = new Subject();
        this.selectionSubject = new Subject();
        this._state = InternalState.SetInitial;
        this._open = false;
        this._popupSettings = { height: 200, animate: true };
        this.direction = rtl ? 'rtl' : 'ltr';
        this.data = [];
        this.subscribeEvents();
        this.hostElement = hostElement.nativeElement;
        this.popupMouseDownHandler = this.onMouseDown.bind(this);
    }
    get width() {
        const wrapperWidth = isDocumentAvailable() ? this.wrapper.nativeElement.offsetWidth : 0;
        const width = this.popupSettings.width || wrapperWidth;
        const minWidth = isNaN(wrapperWidth) ? wrapperWidth : `${wrapperWidth}px`;
        const maxWidth = isNaN(width) ? width : `${width}px`;
        return { min: minWidth, max: maxWidth };
    }
    get height() {
        return this.popupSettings.height;
    }
    set popupOpen(open) {
        if (this.disabled || this.readonly || this.popupOpen === open) {
            return;
        }
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
            if (this.filterable && this.isFocused) {
                this.focus();
            }
        }
        if (eventArgs.isDefaultPrevented()) {
            return;
        }
        this._toggle(open);
    }
    get popupOpen() {
        return this._open;
    }
    get widgetTabIndex() {
        return this.disabled ? undefined : this.tabIndex;
    }
    get ariaHasPopup() {
        return true;
    }
    get ariaExpanded() {
        return this.popupOpen;
    }
    get ariaOwns() {
        return this.listBoxId;
    }
    get ariaActivedescendant() {
        return this.optionPrefix + "-" + getter(this.value, this.valueField);
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    /**
     * Sets the data of the DropDownList.
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        return this._data;
    }
    /**
     * Sets the value of the DropDownList. It can either be of the primitive (string, numbers) or of the complex (objects) type. To define the type, use the `valuePrimitive` option.
     *
     * > All selected values which are not present in the source are ignored.
     */
    set value(newValue) {
        this._value = newValue;
        this.cdr.markForCheck();
    }
    get value() {
        return this._value;
    }
    /**
     * Configures the popup of the DropDownList.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `width: Number`&mdash;Sets the width of the popup container. By default, the width of the host element is used.
     * - `height: Number`&mdash;Sets the height of the popup container. By default, the height is 200px.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true, height: 200 }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * @hidden
     */
    blurComponent() {
        this.wrapperBlurred.emit();
    }
    /**
     * @hidden
     */
    blurFilterInput() {
        this.filterBlurred.emit();
    }
    /**
     * @hidden
     */
    focusComponent() {
        this.wrapperFocused.emit();
        if (!this.isFocused) {
            this.isFocused = true;
            this.onFocus.emit();
        }
    }
    /**
     * @hidden
     */
    keydown(event) {
        const hasSelected = isPresent(this.selectionService.selected[0]);
        const focused = isNaN(this.selectionService.focused) ? 0 : this.selectionService.focused;
        let offset = 0;
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.filterInput && this.filterInput.nativeElement === document.activeElement && (event.keyCode === Keys.home || event.keyCode === Keys.end)) {
            return;
        }
        if (!hasSelected) {
            if (event.keyCode === Keys.down) {
                offset = -1;
            }
            else if (event.keyCode === Keys.up) {
                offset = 1;
            }
        }
        const eventData = event;
        const action = this.navigationService.process({
            current: focused + offset,
            max: this.data.length - 1,
            min: this.defaultItem ? -1 : 0,
            originalEvent: eventData
        });
        const leftRightKeys = (action === NavigationAction.Left) || (action === NavigationAction.Right);
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Tab &&
            action !== NavigationAction.Backspace &&
            action !== NavigationAction.Delete &&
            !(leftRightKeys && this.filterable) &&
            action !== NavigationAction.Enter //enter when popup is opened is handled before `handleEnter`
        ) {
            eventData.preventDefault();
        }
    }
    /**
     * @hidden
     */
    keypress(event) {
        if (!this.filterable) {
            this.onKeyPress(event);
        }
    }
    /**
     * @hidden
     */
    click() {
        this.wrapper.nativeElement.focus();
        this.popupOpen = !this.popupOpen;
    }
    /**
     * @hidden
     */
    onResize() {
        if (this._open) {
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
        }
    }
    get widgetClasses() {
        return true;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.hostElement, "tabindex");
        this.createSelectionStream();
        this.createValueStream();
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty() {
        return !this.value && !this.defaultItem;
    }
    /**
     * @hidden
     */
    onFilterFocus() {
        this.filterFocused.emit();
    }
    /**
     * @hidden
     */
    popupOpened() {
        if (this.filterInput && !this.touchEnabled) {
            const nativeElement = this.filterInput.nativeElement;
            const text = this.filterText || nativeElement.value;
            this.nextTick(() => {
                nativeElement.focus();
                nativeElement.setSelectionRange(text.length, text.length);
            });
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this._toggle(false);
        this.unsubscribeEvents();
    }
    /**
     * @hidden
     */
    ngOnChanges(_changes) {
        if (this.valuePrimitive === undefined) {
            this.valuePrimitive = this.valueField ? false : true;
        }
        if (_changes.hasOwnProperty("value")) {
            this.verifySettings(_changes.value.currentValue);
            this._modelValue = _changes.value.currentValue;
        }
        this.setState();
    }
    /**
     * Focuses the DropDownList.
     */
    focus() {
        if (!this.disabled) {
            this.wrapper.nativeElement.focus();
        }
    }
    /**
     * Blurs the DropDownList.
     */
    blur() {
        if (!this.disabled) {
            this.wrapper.nativeElement.blur();
        }
    }
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        Promise.resolve(null).then(() => {
            this._toggle((open === undefined) ? !this._open : open);
            this.cdr.markForCheck();
        });
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this.popupOpen;
    }
    /**
     * Resets the value of the DropDownList.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.
     */
    reset() {
        this._modelValue = undefined;
        this.setState();
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.verifySettings(value);
        const isInitial = Boolean(value !== null && this._state & InternalState.SetInitial);
        if ((value === null && this._state & InternalState.UseModel) && this._state & InternalState.SetInitial) {
            return;
        }
        if (isInitial) {
            this._state |= InternalState.UseModel;
        }
        this._modelValue = value;
        this.setState();
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    get listContainerClasses() {
        const containerClasses = ['k-list-container', 'k-reset'];
        if (this.popupSettings.popupClass) {
            containerClasses.push(this.popupSettings.popupClass);
        }
        return containerClasses;
    }
    /**
     * @hidden
     */
    get buttonClasses() {
        return {
            [this.iconClass]: !this.loading && this.iconClass,
            'k-i-arrow-s': !this.loading && !this.iconClass,
            'k-i-loading': this.loading,
            'k-icon': true
        };
    }
    /**
     * @hidden
     */
    setDefaultItemClasses() {
        return {
            'k-list-optionlabel': true
        };
    }
    /**
     * @hidden
     */
    getText() {
        return this.text;
    }
    /**
     * @hidden
     */
    getDefaultItemText() {
        return getter(this.defaultItem, this.textField);
    }
    _toggle(open) {
        this._open = open;
        if (this.popupRef) {
            this.popupRef.popupElement
                .removeEventListener('mousedown', this.popupMouseDownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
        if (this._open) {
            const horizontalAlign = this.direction === "rtl" ? "right" : "left";
            const anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
            const popupPosition = { horizontal: horizontalAlign, vertical: "top" };
            this.popupRef = this.popupService.open({
                anchor: this.wrapper,
                anchorAlign: anchorPosition,
                animate: this.popupSettings.animate,
                appendTo: this.appendTo,
                content: this.popupTemplate,
                popupAlign: popupPosition,
                popupClass: this.listContainerClasses,
                positionMode: 'absolute'
            });
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
            popupWrapper.setAttribute("dir", this.direction);
            this.popupRef.popupOpen.subscribe(this.popupOpened.bind(this));
            this.popupRef.popupAnchorViewportLeave.subscribe(() => this.popupOpen = false);
        }
    }
    createSelectionStream() {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        this.selectionSubscription = this.selectionSubject.pipe(map((index) => {
            const dataItem = isPresent(this.data[index]) ? this.data[index] : this.defaultItem;
            return {
                dataItem: dataItem,
                text: getter(dataItem, this.textField),
                value: this.valuePrimitive ? getter(dataItem, this.valueField) : dataItem
            };
        }), distinctUntilChanged((prev, next) => {
            return prev.value === next.value;
        }))
            .subscribe((state) => {
            this.dataItem = state.dataItem;
            this.text = state.text;
            this.value = state.value;
            this.selectionChange.emit(state.dataItem);
        });
    }
    createValueStream() {
        if (this.valueSubscription) {
            this.valueSubscription.unsubscribe();
        }
        this.valueSubscription = this.valueSubject.pipe(tap(() => { this.popupOpen = false; }), map((dataItem) => dataItem || this.defaultItem), distinctUntilChanged((prev, next) => {
            const current = getter(this.dataItem, this.valueField);
            prev = getter(prev, this.valueField);
            next = getter(next, this.valueField);
            return (prev === next) && (current === next);
        }), map((dataItem) => {
            const primitiveValue = getter(dataItem, this.valueField);
            const newValue = this.valuePrimitive ? primitiveValue : dataItem;
            const newText = getter(dataItem, this.textField);
            return {
                dataItem: dataItem,
                primitiveValue: primitiveValue,
                text: newText,
                value: newValue
            };
        }))
            .subscribe((state) => {
            this.dataItem = state.dataItem;
            this.value = state.value;
            this.text = state.text;
            this.selectionSubject.next(this.data.findIndex((element) => {
                return getter(element, this.valueField) === getter(this.value, this.valueField, this.valuePrimitive);
            }));
            this.emitChange(this.valuePrimitive ? state.primitiveValue : this.value);
            if (this.filterable && this.filterText) {
                this.filterText = "";
                this.cdr.markForCheck();
                this.filterChange.emit(this.filterText);
            }
        });
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.changeSubscription = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));
        this.selectSubscription = this.selectionService.onSelect.subscribe(this.handleItemSelect.bind(this));
        this.navigationSubscription = merge(this.navigationService.up, this.navigationService.down, this.navigationService.left.pipe(skipWhile(() => this.filterable)), this.navigationService.right.pipe(skipWhile(() => this.filterable)), this.navigationService.home, this.navigationService.end)
            .subscribe((event) => this.selectionService.select(event.index));
        this.openSubscription = this.navigationService.open.subscribe(() => this.popupOpen = true);
        this.closeSubscription = this.navigationService.close.subscribe(() => {
            this.popupOpen = false;
            this.wrapper.nativeElement.focus();
        });
        this.enterSubscription =
            merge(this.navigationService.enter.pipe(tap((event) => {
                if (this.popupOpen) {
                    event.originalEvent.preventDefault();
                }
            })), this.navigationService.esc)
                .subscribe(this.handleEnter.bind(this));
        this.filterBlurredSubscription = this.filterBlurred.pipe(concatMap(() => interval(10).pipe(take(1), takeUntil(this.wrapperFocused))))
            .subscribe(() => {
            this.wrapperBlurred.emit();
        });
        this._zone.runOutsideAngular(() => {
            this.componentBlurredSubscription =
                merge(this.wrapperBlurred.pipe(concatMap(() => interval(10).pipe(take(1), takeUntil(this.filterFocused)))), this.navigationService.tab).pipe(filter(() => this.isFocused))
                    .subscribe(() => this._zone.run(() => {
                    this.componentBlur();
                }));
        });
    }
    unsubscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.changeSubscription.unsubscribe();
        this.selectSubscription.unsubscribe();
        this.navigationSubscription.unsubscribe();
        this.openSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
        this.enterSubscription.unsubscribe();
        this.componentBlurredSubscription.unsubscribe();
        this.filterBlurredSubscription.unsubscribe();
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.valueSubscription) {
            this.valueSubscription.unsubscribe();
        }
    }
    handleItemChange(event) {
        const index = event.indices.length ? event.indices[0] : undefined;
        if (!isPresent(index)) {
            return;
        }
        const dataItem = isPresent(this.data[index]) ? this.data[index] : this.defaultItem;
        this.valueSubject.next(dataItem);
    }
    handleItemSelect(event) {
        const index = event.indices.length ? event.indices[0] : undefined;
        if (!isPresent(index)) {
            return;
        }
        const dataItem = isPresent(this.data[index]) ? this.data[index] : this.defaultItem;
        if (this.popupOpen) {
            this.selectionSubject.next(index);
        }
        else {
            this.valueSubject.next(dataItem);
        }
    }
    handleEnter() {
        if (this.popupOpen) {
            this.valueSubject.next(this.data[this.selectionService.focused]);
            this.wrapper.nativeElement.focus();
        }
    }
    verifySettings(newValue) {
        const valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);
        if (!isDevMode()) {
            return;
        }
        if (this.defaultItem && this.valueField && typeof this.defaultItem !== "object") {
            throw new Error("defaultItem and data items must be of same type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/api/DropDownListComponent/#toc-defaultitem");
        }
        if (this.valuePrimitive === true && isPresent(newValue) && typeof newValue === "object") {
            throw new Error("Expected initial value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection");
        }
        if (this.valuePrimitive === false && isPresent(newValue) && typeof newValue !== "object") {
            throw new Error("Expected initial value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection");
        }
        if (valueOrText) {
            throw new Error("Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-bind-to-arrays-of-complex-data");
        }
    }
    componentBlur() {
        if (getter(this._previousValue, this.valueField) !== getter(this.value, this.valueField)) {
            this.valueSubject.next(this.dataItem);
        }
        else {
            this.popupOpen = false;
        }
        if (this.isFocused) {
            this.isFocused = false;
            this.onBlur.emit();
            this.onTouchedCallback();
        }
    }
    /**
     * @hidden
     */
    onMouseDown(event) {
        const tagName = event.target.tagName.toLowerCase();
        if (tagName !== "input") {
            event.preventDefault();
        }
    }
    onKeyPress(event) {
        if (event.which === 0 || event.keyCode === Keys.enter) {
            return;
        }
        let character = String.fromCharCode(event.charCode || event.keyCode);
        if (this.ignoreCase) {
            character = character.toLowerCase();
        }
        if (character === " ") {
            event.preventDefault();
        }
        this.word += character;
        this.last = character;
        this.search();
    }
    search() {
        clearTimeout(this.typingTimeout);
        if (!this.filterable) {
            this.typingTimeout = setTimeout(() => { this.word = ""; }, this.delay);
            this.selectNext();
        }
    }
    selectNext() {
        let data = this.data.map((item, index) => {
            return { item: item, itemIndex: index };
        });
        const isInLoop = sameCharsOnly(this.word, this.last);
        let dataLength = data.length;
        let startIndex = isNaN(this.selectionService.selected[0]) ? 0 : this.selectionService.selected[0];
        let text, index, defaultItem;
        if (this.defaultItem) {
            defaultItem = { item: this.defaultItem, itemIndex: -1 };
            dataLength += 1;
            startIndex += 1;
        }
        startIndex += isInLoop ? 1 : 0;
        data = shuffleData(data, startIndex, defaultItem);
        index = 0;
        for (; index < dataLength; index++) {
            text = getter(data[index].item, this.textField);
            const loopMatch = Boolean(isInLoop && matchText(text, this.last, this.ignoreCase));
            const nextMatch = Boolean(matchText(text, this.word, this.ignoreCase));
            if (loopMatch || nextMatch) {
                index = data[index].itemIndex;
                break;
            }
        }
        if (index !== dataLength) {
            this.navigate(index);
        }
    }
    emitChange(value) {
        this._modelValue = this.dataItem;
        this.onChangeCallback(value);
        this.valueChange.emit(value);
    }
    navigate(index) {
        this.selectionService.select(index);
    }
    resolveState() {
        const primitiveValue = getter(this._modelValue, this.valueField, true);
        let existing;
        let state;
        if (this.data.length) {
            state = InternalState.UseExisting;
        }
        else {
            state = isPresent(this._modelValue) ? InternalState.UseModel : InternalState.UseDefault;
        }
        if (state === InternalState.UseExisting) {
            existing = resolveValue({ data: this.data, defaultItem: this.defaultItem, value: primitiveValue, valueField: this.valueField });
            if (existing.dataItem !== undefined) {
                state = InternalState.UseExisting;
            }
            else {
                state = isPresent(this._modelValue) ? InternalState.UseModel : InternalState.UseDefault;
            }
        }
        state |= this._state & InternalState.SetInitial | this._state & InternalState.UseModel;
        this._state = state;
        return existing;
    }
    setState() {
        let resolved = this.resolveState();
        let newState = { value: undefined, text: undefined, dataItem: undefined, selected: [] };
        if (this._state & InternalState.UseModel && !(this._state & InternalState.UseExisting)) {
            newState.value = this.valuePrimitive ? getter(this._modelValue, this.valueField, true) : this._modelValue;
            newState.dataItem = this._modelValue;
            newState.text = getter(isPresent(this._modelValue) ? this._modelValue : this.defaultItem, this.textField);
            newState.selected = [];
            this.selectionService.resetSelection(newState.selected);
            this.selectionService.focused = 0;
        }
        else if (this._state & InternalState.UseExisting) {
            newState.value = this.valuePrimitive ? getter(resolved.dataItem, this.valueField) : resolved.dataItem;
            newState.dataItem = resolved.dataItem;
            newState.text = getter(resolved.dataItem, this.textField);
            if (this._state & InternalState.UseModel) {
                this._modelValue = resolved.dataItem;
            }
            this.selectionService.resetSelection(resolved.selected);
            if (this.filterText) {
                this.selectionService.focused = 0;
            }
        }
        else if (this._state & InternalState.UseDefault) {
            newState.value = this.valuePrimitive ? getter(this.defaultItem, this.valueField, false) : this.defaultItem;
            newState.dataItem = this.defaultItem;
            newState.text = getter(this.defaultItem, this.textField);
            this.selectionService.resetSelection(this.defaultItem ? [-1] : []);
            this.selectionService.focused = 0;
        }
        if (this._state & InternalState.UseModel) {
            this._state &= ~InternalState.UseModel;
            this._state &= ~InternalState.SetInitial;
            this._previousValue = newState.dataItem;
        }
        else {
            this._previousValue = this.dataItem;
        }
        this.text = newState.text;
        this.value = newState.value;
        this.dataItem = newState.dataItem;
    }
    /**
     * @hidden
     */
    handleFilter(event) {
        this.filterChange.emit(event.target.value);
    }
    nextTick(f) {
        this._zone.runOutsideAngular(() => {
            // Use `setTimeout` instead of a resolved promise
            // because the latter does not wait long enough.
            setTimeout(() => this._zone.run(f));
        });
    }
}
DropDownListComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoDropDownList',
                providers: [DROPDOWNLIST_VALUE_ACCESSOR, SelectionService, NavigationService],
                selector: 'kendo-dropdownlist',
                template: `
        <span #wrapper unselectable="on"
          role="listbox"
          [id]="id"
          [ngClass]="{
            'k-dropdown-wrap': true,
            'k-state-default': !this.disabled,
            'k-state-disabled': this.disabled,
            'k-state-focused': this.isFocused
          }"
          [attr.dir]="direction"
          [attr.readonly]="readonly"
          [attr.tabindex]="widgetTabIndex"
          [attr.aria-disabled]="disabled"
          [attr.aria-readonly]="readonly"
          [attr.aria-haspopup]="ariaHasPopup"
          [attr.aria-expanded]="ariaExpanded"
          [attr.aria-owns]="ariaOwns"
          [attr.aria-activedescendant]="ariaActivedescendant"
          (focus)="focusComponent()"
          (blur)="blurComponent()"
          (keydown)="keydown($event)"
          (keypress)="keypress($event)"
          (click)="click()"
        >
            <span [ngClass]="{ 'k-input': true }" unselectable="on">
               <ng-template *ngIf="valueTemplate"
                   [templateContext]="{
                       templateRef: valueTemplate.templateRef,
                       $implicit: dataItem
                   }">
               </ng-template>
               <ng-template [ngIf]="!valueTemplate">{{ getText() }}</ng-template>
           </span>
           <span [ngClass]="{ 'k-select': true}" unselectable="on">
               <span [ngClass]="buttonClasses"></span>
           </span>
           <ng-template #popupTemplate>
               <!--filterable-->

               <ng-template [ngIf]="filterable">
                   <span [ngClass]="{ 'k-list-filter': true }" (click)="$event.stopImmediatePropagation()">
                       <input #filterInput
                           [dir]="direction"
                           [(ngModel)]="filterText"
                           class="k-textbox"
                           (keydown)="keydown($event)"
                           (input)="handleFilter($event)"
                           (focus)="onFilterFocus()"
                           (blur)="blurFilterInput()" />
                       <span [ngClass]="{ 'k-icon': true, 'k-i-search': true }" unselectable="on"></span>
                   </span>
               </ng-template>
               <!--default item-->
               <ng-template [ngIf]="defaultItem && !itemTemplate">
                   <div [ngClass]="setDefaultItemClasses()" kendoDropDownsSelectable [index]="-1">
                       {{ getDefaultItemText() }}
                   </div>
               </ng-template>
               <ng-template [ngIf]="defaultItem && itemTemplate">
                   <div [ngClass]="setDefaultItemClasses()" kendoDropDownsSelectable [index]="-1">
                       <ng-template
                           [templateContext]="{
                               templateRef: itemTemplate.templateRef,
                               $implicit: defaultItem
                           }">
                       </ng-template>
                   </div>
               </ng-template>
               <!--header template-->
               <ng-template *ngIf="headerTemplate"
                   [templateContext]="{
                       templateRef: headerTemplate.templateRef
                   }">
               </ng-template>
               <!--list-->
               <kendo-list
                   [id]="listBoxId"
                   [optionPrefix]="optionPrefix"
                   [data]="data"
                   [textField]="textField"
                   [valueField]="valueField"
                   [template]="itemTemplate"
                   [height]="height"
                   [show]="popupOpen"
                   >
               </kendo-list>
               <!--no-data template-->
               <div class="k-nodata" *ngIf="data.length === 0">
                   <ng-template [ngIf]="noDataTemplate"
                       [templateContext]="{
                           templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined
                       }">
                   </ng-template>
                   <ng-template [ngIf]="!noDataTemplate">
                       <div>NO DATA FOUND.</div>
                   </ng-template>
               </div>
               <!--footer template-->
               <ng-template *ngIf="footerTemplate"
                   [templateContext]="{
                       templateRef: footerTemplate.templateRef
                   }">
               </ng-template>
            </ng-template>
        </span>
        <ng-template [ngIf]="popupOpen">
            <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
        </ng-template>
        <ng-container #container></ng-container>
  `
            },] },
];
/** @nocollapse */
DropDownListComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
    { type: PopupService, },
    { type: SelectionService, },
    { type: NavigationService, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] },] },
];
DropDownListComponent.propDecorators = {
    'id': [{ type: Input },],
    'iconClass': [{ type: Input },],
    'loading': [{ type: Input },],
    'data': [{ type: Input },],
    'value': [{ type: Input },],
    'textField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'popupSettings': [{ type: Input },],
    'defaultItem': [{ type: Input },],
    'disabled': [{ type: Input },],
    'readonly': [{ type: Input },],
    'filterable': [{ type: Input },],
    'ignoreCase': [{ type: Input },],
    'delay': [{ type: Input },],
    'valuePrimitive': [{ type: Input },],
    'tabindex': [{ type: Input },],
    'tabIndex': [{ type: Input, args: ["tabIndex",] },],
    'valueChange': [{ type: Output },],
    'filterChange': [{ type: Output },],
    'selectionChange': [{ type: Output },],
    'open': [{ type: Output },],
    'close': [{ type: Output },],
    'onFocus': [{ type: Output, args: ['focus',] },],
    'onBlur': [{ type: Output, args: ['blur',] },],
    'itemTemplate': [{ type: ContentChild, args: [ItemTemplateDirective,] },],
    'valueTemplate': [{ type: ContentChild, args: [ValueTemplateDirective,] },],
    'headerTemplate': [{ type: ContentChild, args: [HeaderTemplateDirective,] },],
    'footerTemplate': [{ type: ContentChild, args: [FooterTemplateDirective,] },],
    'noDataTemplate': [{ type: ContentChild, args: [NoDataTemplateDirective,] },],
    'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] },],
    'filterInput': [{ type: ViewChild, args: ['filterInput',] },],
    'popupTemplate': [{ type: ViewChild, args: ['popupTemplate',] },],
    'wrapper': [{ type: ViewChild, args: ['wrapper',] },],
    'widgetClasses': [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-dropdown',] }, { type: HostBinding, args: ['class.k-header',] },],
};
