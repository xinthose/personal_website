import { Component, Input, Output, EventEmitter, ViewChildren, ElementRef, ViewChild, ChangeDetectorRef, NgZone } from '@angular/core';
import { ListItemDirective } from './list-item.directive';
import { isPresent, getter, isChanged } from './util';
import { SelectionService } from './selection.service';
import { map } from 'rxjs/operators/map';
import { merge } from 'rxjs/operators/merge';
import { DisabledItemsService } from './disabled-items.service';
import { DataService } from './data.service';
import { fromEvent } from 'rxjs/observable/fromEvent';
/**
 * @hidden
 */
export class ListComponent {
    /* tslint:disable:member-ordering */
    constructor(wrapper, dataService, selectionService, disabledItemsService, cdr, zone) {
        this.wrapper = wrapper;
        this.dataService = dataService;
        this.selectionService = selectionService;
        this.disabledItemsService = disabledItemsService;
        this.cdr = cdr;
        this.zone = zone;
        this.data = [];
        this.selected = [];
        this.focused = -1;
        this.multipleSelection = false;
        this.onClick = new EventEmitter();
        this.selectSubscription = this.selectionService
            .onSelect.pipe(map((args) => args.indices[0]), merge(this.selectionService.onFocus))
            .subscribe(this.scrollToItem.bind(this));
    }
    set items(items) {
        this._items = items;
        // if no regular item is focused but there is data (i.e. filtering had occured) - scroll top
        const scrollTarget = items.length && this.selectionService.focused === -1 ? 0 : this.selectionService.focused;
        this.scrollToItem(scrollTarget);
    }
    get items() {
        return this._items;
    }
    /**
     * @hidden
     */
    firstVisibleItem(items) {
        const content = this.content.nativeElement;
        const scrollTop = content.scrollTop;
        let item;
        for (let i = 0; i < items.length; i++) {
            if (items[i].offsetTop + items[i].clientHeight > scrollTop) {
                item = items[i];
                break;
            }
        }
        return item;
    }
    findCurrentGroup() {
        const items = this.wrapper.nativeElement.querySelectorAll("li[role]");
        let index;
        if (items) {
            const firstItem = this.firstVisibleItem(items);
            if (!firstItem) {
                this.currentGroup = undefined;
                this.cdr.detectChanges();
                return;
            }
            if (firstItem.getAttribute("role") === "group") {
                index = parseInt(firstItem.getAttribute("group-index"), 10);
                this.currentGroup = this.dataService.groupAt(index);
            }
            else {
                index = parseInt(firstItem.getAttribute("absolute-index"), 10);
                this.currentGroup = this.dataService.closestGroup(index);
            }
            this.cdr.detectChanges();
        }
    }
    index(groupIndex, itemIndex) {
        return groupIndex > 0 ? (this.dataService.groupIndices[groupIndex - 1] + itemIndex) : itemIndex;
    }
    ngOnChanges(changes) {
        if (this.dataService.grouped && isChanged('data', changes)) {
            this.currentGroup = this.dataService.itemsCount ? this.dataService.groupAt(0) : undefined;
            this.createScrollSubscription();
        }
    }
    ngAfterViewInit() {
        if (this.show && this.dataService.grouped) {
            this.findCurrentGroup();
            this.createScrollSubscription();
        }
    }
    ngOnDestroy() {
        this.selectSubscription.unsubscribe();
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
    }
    getHeight() {
        return this.height + "px";
    }
    getText(dataItem) {
        return getter(dataItem, this.textField);
    }
    getValue(dataItem) {
        return getter(dataItem, this.valueField);
    }
    isDisabled(index) {
        return this.disabledItemsService.isIndexDisabled(index);
    }
    scrollToItem(index) {
        const items = this.items.toArray();
        if (isPresent(items[index]) && index !== -1) {
            this.scroll(items[index].element);
        }
    }
    scroll(item) {
        if (!item) {
            return;
        }
        const nativeElement = item.nativeElement;
        let content = this.content.nativeElement, itemOffsetTop = nativeElement.offsetTop, itemOffsetHeight = nativeElement.offsetHeight, contentScrollTop = content.scrollTop, contentOffsetHeight = content.clientHeight, bottomDistance = itemOffsetTop + itemOffsetHeight;
        if (contentScrollTop > itemOffsetTop) {
            contentScrollTop = itemOffsetTop;
        }
        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
            contentScrollTop = (bottomDistance - contentOffsetHeight);
        }
        content.scrollTop = contentScrollTop;
    }
    createScrollSubscription() {
        if (!this.dataService.grouped || isPresent(this.scrollSubscription)) {
            return;
        }
        this.zone.runOutsideAngular(() => {
            this.scrollSubscription = fromEvent(this.content.nativeElement, "scroll")
                .subscribe(this.findCurrentGroup.bind(this));
        });
    }
}
ListComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-list',
                template: `
    <div *ngIf="dataService.grouped" class='k-outer-group-header k-first'>
        <ng-template *ngIf="fixedGroupTemplate"
            [templateContext]="{
                templateRef: fixedGroupTemplate.templateRef,
                $implicit: currentGroup?.value
            }">
        </ng-template>
        <ng-template [ngIf]="!fixedGroupTemplate"><strong>{{ currentGroup?.value.toString().toUpperCase() }}</strong> </ng-template>
    </div>
    <div #content class="k-list-scroller" [style.maxHeight]="getHeight()" unselectable="on">
    <ul role="listbox" class="k-list k-reset" [attr.id]="id" [attr.aria-hidden]="!show">
         <ng-template *ngIf="!dataService.grouped" ngFor let-dataItem let-index="index" [ngForOf]="data">
            <li
                role="option"
                kendoDropDownsSelectable
                [index]="index"
                [multipleSelection]="multipleSelection"
                [attr.id]="optionPrefix + '-' + getValue(dataItem)"
                [attr.tabIndex]="-1"
                class="k-item"
                [ngClass]="{ 'k-state-disabled': isDisabled(index) }">
                <ng-template *ngIf="template"
                    [templateContext]="{
                        templateRef: template.templateRef,
                        $implicit: dataItem
                    }">
                </ng-template>
                <ng-template [ngIf]="!template">{{ getText(dataItem) }}</ng-template>
            </li>
         </ng-template>
         <ng-template *ngIf="dataService.grouped" ngFor let-dataItem [ngForOf]="dataService.data">
            <li
                *ngIf="dataItem.header && dataItem.index"
                role="group"
                class='k-outer-group-header'
                [attr.group-index]="dataItem.index"
                [attr.id]="optionPrefix + '-' + getValue(dataItem.value)"
                [attr.tabIndex]="-1">
                    <ng-template *ngIf="groupTemplate"
                          [templateContext]="{
                            templateRef: groupTemplate.templateRef,
                            $implicit: dataItem.value
                    }">
                    </ng-template>
                    <ng-template [ngIf]="!groupTemplate"><strong> {{ dataItem.value.toString().toUpperCase() }}</strong> </ng-template>
              </li>
            <li
                *ngIf="!dataItem.header"
                role="option"
                kendoDropDownsSelectable
                [multipleSelection]="multipleSelection"
                [index]="dataItem.offsetIndex"
                [attr.absolute-index]="dataItem.index"
                [attr.id]="optionPrefix + '-' + getValue(dataItem.value)"
                [attr.tabIndex]="-1"
                class="k-item"
                [ngClass]="{ 'k-state-disabled': isDisabled(dataItem.offsetIndex) }">
                <ng-template *ngIf="template"
                    [templateContext]="{
                        templateRef: template.templateRef,
                        $implicit: dataItem.value
                    }">
                </ng-template>
                <ng-template [ngIf]="!template">{{ getText(dataItem.value) }}</ng-template>
            </li>
        </ng-template>
    </ul>
    </div>
  `
            },] },
];
/** @nocollapse */
ListComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: DataService, },
    { type: SelectionService, },
    { type: DisabledItemsService, },
    { type: ChangeDetectorRef, },
    { type: NgZone, },
];
ListComponent.propDecorators = {
    'data': [{ type: Input },],
    'selected': [{ type: Input },],
    'focused': [{ type: Input },],
    'textField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'height': [{ type: Input },],
    'template': [{ type: Input },],
    'groupTemplate': [{ type: Input },],
    'fixedGroupTemplate': [{ type: Input },],
    'show': [{ type: Input },],
    'id': [{ type: Input },],
    'optionPrefix': [{ type: Input },],
    'multipleSelection': [{ type: Input },],
    'onClick': [{ type: Output },],
    'items': [{ type: ViewChildren, args: [ListItemDirective,] },],
    'content': [{ type: ViewChild, args: ['content',] },],
};
