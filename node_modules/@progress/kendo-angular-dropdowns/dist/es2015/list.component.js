import { Component, Input, Output, EventEmitter, ViewChildren, ViewChild } from '@angular/core';
import { ListItemDirective } from './list-item.directive';
import { isPresent, getter } from './util';
import { SelectionService } from './selection.service';
import { map } from 'rxjs/operators/map';
import { merge } from 'rxjs/operators/merge';
/**
 * @hidden
 */
export class ListComponent {
    constructor(selectionService) {
        this.data = [];
        this.selected = [];
        this.focused = -1;
        this.multipleSelection = false;
        this.onClick = new EventEmitter();
        this.selectionService = selectionService;
        this.scrollSubscription = this.selectionService
            .onSelect.pipe(map((args) => args.indices[0]), merge(this.selectionService.onFocus))
            .subscribe(this.scrollToItem.bind(this));
    }
    ngAfterViewInit() {
        if (this.show === true) {
            this.scrollToItem(this.selectionService.focused);
        }
    }
    ngOnDestroy() {
        this.scrollSubscription.unsubscribe();
    }
    setContainerClasses() {
        return {
            'k-list-scroller': true
        };
    }
    getHeight() {
        return this.height + "px";
    }
    getText(dataItem) {
        return getter(dataItem, this.textField);
    }
    getValue(dataItem) {
        return getter(dataItem, this.valueField);
    }
    scrollToItem(index) {
        const items = this.items.toArray();
        if (isPresent(items[index]) && index !== -1) {
            this.scroll(items[index].element);
        }
    }
    scroll(item) {
        if (!item) {
            return;
        }
        const nativeElement = item.nativeElement;
        let content = this.content.nativeElement, itemOffsetTop = nativeElement.offsetTop, itemOffsetHeight = nativeElement.offsetHeight, contentScrollTop = content.scrollTop, contentOffsetHeight = content.clientHeight, bottomDistance = itemOffsetTop + itemOffsetHeight;
        if (contentScrollTop > itemOffsetTop) {
            contentScrollTop = itemOffsetTop;
        }
        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
            contentScrollTop = (bottomDistance - contentOffsetHeight);
        }
        content.scrollTop = contentScrollTop;
    }
}
ListComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-list',
                template: `
    <div #content [ngClass]="setContainerClasses()" [style.maxHeight]="getHeight()" unselectable="on">
    <ul role="listbox" [attr.id]="id" [attr.aria-hidden]="!show" [ngClass]="{ 'k-list': true, 'k-reset': true }">
        <li role="option"
            *ngFor="let dataItem of data; let index = index"
            kendoDropDownsSelectable
            [index]="index"
            [multipleSelection]="multipleSelection"
            [attr.id]="optionPrefix + '-' + getValue(dataItem)"
            [attr.tabIndex]="-1"
            [ngClass]="{'k-item': true}">
            <ng-template *ngIf="template"
                [templateContext]="{
                    templateRef: template.templateRef,
                    $implicit: dataItem
                }">
            </ng-template>
            <ng-template [ngIf]="!template">{{ getText(dataItem) }}</ng-template>
        </li>
    </ul>
    </div>
  `
            },] },
];
/** @nocollapse */
ListComponent.ctorParameters = () => [
    { type: SelectionService, },
];
ListComponent.propDecorators = {
    'data': [{ type: Input },],
    'selected': [{ type: Input },],
    'focused': [{ type: Input },],
    'textField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'height': [{ type: Input },],
    'template': [{ type: Input },],
    'show': [{ type: Input },],
    'id': [{ type: Input },],
    'optionPrefix': [{ type: Input },],
    'multipleSelection': [{ type: Input },],
    'onClick': [{ type: Output },],
    'items': [{ type: ViewChildren, args: [ListItemDirective,] },],
    'content': [{ type: ViewChild, args: ['content',] },],
};
