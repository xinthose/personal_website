import { Injectable } from '@angular/core';
import { DOMService } from './dom.service';
import { eitherRect, removeStackingOffset } from '../util';
/**
 * @hidden
 */
export class AlignService {
    constructor(_dom) {
        this._dom = _dom;
    }
    alignElement(settings) {
        const { anchor, element, anchorAlign, elementAlign, offset, positionMode } = settings;
        const fixedMode = positionMode === 'fixed' || !this._dom.hasOffsetParent(element);
        const anchorRect = fixedMode ? this.absoluteRect(anchor, element, offset) : this.relativeRect(anchor, element, offset);
        return this._dom.align({
            anchorAlign: anchorAlign,
            anchorRect: anchorRect,
            elementAlign: elementAlign,
            elementRect: this._dom.offset(element)
        });
    }
    absoluteRect(anchor, element, offset) {
        return this._dom.removeScroll(this._dom.addScroll(removeStackingOffset(eitherRect(this._dom.offset(anchor), offset), this._dom.stackingElementOffset(element)), this._dom.stackingElementScroll(element)), this.elementScrollPosition(anchor, element));
    }
    elementScrollPosition(anchor, element) {
        return anchor ? { x: 0, y: 0 } : this._dom.scrollPosition(element);
    }
    relativeRect(anchor, element, offset) {
        return eitherRect(this._dom.position(anchor, element), offset);
    }
}
AlignService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AlignService.ctorParameters = () => [
    { type: DOMService, },
];
