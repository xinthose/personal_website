import { Injectable, NgZone } from '@angular/core';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { merge } from 'rxjs/observable/merge';
import { auditTime } from 'rxjs/operators/auditTime';
import { DOMService } from './dom.service';
import { FRAME_DURATION, isDocumentAvailable } from '../util';
/**
 * @hidden
 */
export const THRESHOLD_DIFF = 1;
/**
 * @hidden
 */
export class ScrollableService {
    constructor(_dom, _zone) {
        this._dom = _dom;
        this._zone = _zone;
    }
    forElement(element) {
        this.unsubscribe();
        this.element = element;
        return this;
    }
    subscribe(callback) {
        if (!callback || !isDocumentAvailable() || !this.element) {
            return;
        }
        const nativeElement = this._dom.nativeElement(this.element);
        const parents = this._dom.scrollableParents(this.element);
        this._zone.runOutsideAngular(() => {
            const observables = parents.map(p => fromEvent(p, "scroll").pipe(auditTime(FRAME_DURATION)));
            const subscriber = (e) => {
                callback(this.isVisible(nativeElement, e.target));
            };
            this.subscription = merge(...observables).subscribe(subscriber);
        });
    }
    unsubscribe() {
        if (!this.subscription) {
            return;
        }
        this.subscription.unsubscribe();
    }
    isVisible(elem, container) {
        const elemRect = this._dom.boundingOffset(elem);
        const containerRect = this._dom.boundingOffset(container);
        if ((containerRect.top - elemRect.bottom) > THRESHOLD_DIFF) {
            return false;
        }
        if ((containerRect.bottom - elemRect.bottom) < -THRESHOLD_DIFF) {
            return false;
        }
        if ((containerRect.right - elemRect.right) < -THRESHOLD_DIFF) {
            return false;
        }
        if ((containerRect.left - elemRect.left) > THRESHOLD_DIFF) {
            return false;
        }
        return true;
    }
}
ScrollableService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ScrollableService.ctorParameters = () => [
    { type: DOMService, },
    { type: NgZone, },
];
