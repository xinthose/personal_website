import { ElementRef, EventEmitter, Renderer2 as Renderer, OnDestroy, AfterViewChecked } from '@angular/core';
import { KendoButtonService } from './button.service';
import { ButtonLook } from '../button-look';
/**
 * Represents the Kendo UI Button component for Angular.
 */
export declare class ButtonDirective implements AfterViewChecked, OnDestroy {
    private service;
    /**
     * Provides visual styling that indicates if the Button is active.
     * By default, `togglable` is set to `false`.
     */
    togglable: boolean;
    /**
     * Adds visual weight to the Button and makes it primary.
     */
    primary: boolean;
    /**
     * Changes the visual appearance by using alternative styling options.
     * The available values are:
     * * `bare`
     * * `flat`
     * * `outline`
     */
    look: ButtonLook;
    element: HTMLElement;
    renderer: Renderer;
    isDisabled: boolean;
    isIcon: boolean;
    isIconClass: boolean;
    imageNode: HTMLImageElement;
    iconNode: HTMLElement;
    /**
     * Sets the selected state of the Button.
     */
    selected: boolean;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex: number;
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    icon: string;
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    imageUrl: string;
    /**
     * If set to `true`, it disables the Button.
     */
    disabled: boolean;
    /**
     * Fires each time the selected state of a togglable button is changed.
     *
     * The event argument is the new selected state (boolean).
     */
    selectedChange: EventEmitter<any>;
    private direction;
    readonly classButton: boolean;
    readonly classDisabled: boolean;
    readonly classPrimary: boolean;
    readonly isBare: boolean;
    readonly isFlat: boolean;
    readonly isOutline: boolean;
    readonly classActive: boolean;
    /**
     * @hidden
     */
    onClick(): void;
    readonly dir: string;
    constructor(element: ElementRef, renderer: Renderer, service: KendoButtonService, rtl: boolean);
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Focuses the Button component.
     */
    focus(): void;
    /**
     * Blurs the Button component.
     */
    blur(): void;
    /**
     * @hidden
     */
    setAttribute(attribute: string, value: string): void;
    /**
     * @hidden
     *
     * Internal setter that triggers selectedChange
     */
    setSelected(value: boolean): void;
    private hasText();
    private addImgIcon(imageUrl);
    private addIcon(classNames);
    private prependChild(node);
    private iconSetter(icon, insertIcon);
    private removeNodes();
    private removeImageNode();
    private removeIconNode();
    private updateIconNode();
    private toggleClass(className, add);
}
